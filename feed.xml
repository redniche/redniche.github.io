<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://redniche.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://redniche.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-07-11T21:04:11+09:00</updated><id>https://redniche.github.io/feed.xml</id><title type="html">니체의 개발 인생</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle><entry><title type="html">안드로이드앱-브래인매니저</title><link href="https://redniche.github.io/posts/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%95%B1-%EB%B8%8C%EB%9E%98%EC%9D%B8%EB%A7%A4%EB%8B%88%EC%A0%80/" rel="alternate" type="text/html" title="안드로이드앱-브래인매니저" /><published>2022-03-20T23:03:00+09:00</published><updated>2022-03-21T00:55:25+09:00</updated><id>https://redniche.github.io/posts/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%95%B1-%EB%B8%8C%EB%9E%98%EC%9D%B8%EB%A7%A4%EB%8B%88%EC%A0%80</id><content type="html" xml:base="https://redniche.github.io/posts/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%95%B1-%EB%B8%8C%EB%9E%98%EC%9D%B8%EB%A7%A4%EB%8B%88%EC%A0%80/"><![CDATA[<h2 id="neomindstdbrainmanager-프로젝트">NeoMindStd/BrainManager 프로젝트</h2>

<p><a href="https://github.com/NeoMindStd/BrainManager">깃허브 링크</a></p>

<h2 id="소개">소개</h2>

<p>사용자가 기억하고자 하는 내용(키워드)을 간격 반복 알고리즘으로 복습시간을 알람. 사용자가 해당 내용을 잊지 않게 하는 안드로이드 앱입니다.</p>

<p>기능이 약간 추상적일 수 있는데 간단히 소개하자면 사용자가 키워드를 입력하고 해당 키워드의 설명을 적어넣고 등록하면 그 키워드와 설명에 대한 문제를 알아서 생성해서 복습할 수 있도록 도와줍니다.</p>

<p>영어단어, 사람, 기술적인 배움 등등 온갖 외워야 할 것들을 쉽게 외울 수 있도록 도와주는 것입니다!</p>

<p>구현을 하면서 가중치를 업데이트 하는 방식의 알고리즘을 사용했는데 문제의 정답률에 따라서 복습을 최적화 하는 등의 기능을 추가로 구현해볼 수 있을 것 같습니다.</p>

<h2 id="개발-후기">개발 후기</h2>

<p>4인 개발 팀이었지만 저와 팀장 둘이서 거의 모든 기능을 구현하기도 하고 여러 버그가 남아 있어 관리적 측면에선 실패한 프로젝트입니다. 하지만 이를 경험하면서 애자일방식 개발과 의사소통의 필요성을 느끼게 되었고 이후 프로젝트들에서 이에서 많은 것들을 피드백하여 개선할 수 있었습니다.</p>

<h2 id="요약">요약</h2>

<table>
  <th></th>    
  <th>내용</th>
  <tr>
      <td>인원</td>
      <td>4</td>
  </tr>
  <tr>
      <td>개발기간</td>
      <td>2019.03~2019.06</td>
  </tr>
  <tr>
      <td>배포</td>
      <td><a href="https://play.google.com/store/apps/details?id=std.neomind.brainmanager">플레이스토어 링크</a></td>
  </tr>
  <tr>
      <td>성과</td>
      <td> 플레이스토어 50회 이상 설치 </td>
  </tr>
</table>

<hr />

<h2 id="개발환경">개발환경</h2>

<table>
  <th>범주</th>    
  <th>스택</th>
  <tr>
    <td>언어</td>
    <td><img src="https://img.shields.io/badge/Java-Java 8-007ACC?style=flat&amp;logo=Java&amp;logoColor=white" /></td>
  </tr>
  <tr>
    <td>개발도구</td>
    <td><img src="https://img.shields.io/badge/Android-Android SDK 29-007A1C?style=flat&amp;logo=Android&amp;logoColor=white" /><img src="https://img.shields.io/badge/빌드-Gradle-A07ACC?style=flat&amp;logo=Gradle&amp;logoColor=white" /></td>
  </tr>
  <tr>
    <td>주요 패키지</td>
    <td><pre>
<img src="https://img.shields.io/badge/이미지뷰어-Baseflow/PhotoView-007ACC?style=flat&amp;logo=Android&amp;logoColor=white" />
<img src="https://img.shields.io/badge/재사용뷰어-wasabeef/recyclerview--animators-50AFCC?style=flat&amp;logo=Android&amp;logoColor=white" />
<img src="https://img.shields.io/badge/원형이미지-lopspower/CircularImageView-502ACC?style=flat&amp;logo=Android&amp;logoColor=white" />
<img src="https://img.shields.io/badge/차트-PhilJay/MPAndroidChart-502ACC?style=flat&amp;logo=Android&amp;logoColor=white" /><img src="https://img.shields.io/badge/머터리얼텍스트-rengwuxian/MaterialEditText-502ACC?style=flat&amp;logo=Android&amp;logoColor=white" /><img src="https://img.shields.io/badge/인트로페이지-matthewbradshaw--io/SlidingIntroScreen-502ACC?style=flat&amp;logo=Android&amp;logoColor=white" /></pre>
    </td>
  </tr>
</table>

<h2 id="실행화면">실행화면</h2>

<p><img src="https://play-lh.googleusercontent.com/ZFxOZzER0NgrHYLM58D7Ma9xm-ZFdvu9tDweGUor6K_g7dqm9ErbWaM4fwn_Ys_Q0woS=w2560-h1440-rw" alt="App 화면 1" /></p>

<p><img src="/assets/img/portfolio/mainproject/브래인매니저/2.png" alt="App 화면 2" /></p>

<p><img src="/assets/img/portfolio/mainproject/브래인매니저/3.png" alt="App 화면 3" /></p>

<h2 id="주요-역할">주요 역할</h2>

<h3 id="설계">설계</h3>

<ul>
  <li>아이디어 제안자로서 아키텍처 설계</li>
</ul>

<h3 id="구현">구현</h3>

<ul>
  <li>복습 화면</li>
  <li>복습 알림 알고리즘(간격 반복 알고리즘)</li>
  <li>관계성 설정</li>
  <li>푸시 알림</li>
  <li>야간모드</li>
  <li>SQLite 쿼리</li>
  <li>Locale별 언어 처리</li>
  <li>안드로이드 버전별 동작 처리</li>
</ul>

<h2 id="애플리케이션-아키텍처">애플리케이션 아키텍처</h2>

<p><img src="/assets/img/portfolio/mainproject/브래인매니저/1.png" alt="App 아키텍처" /></p>]]></content><author><name>redniche yechankun</name></author><category term="포트폴리오" /><category term="메인프로젝트" /><category term="니체" /><category term="예찬군" /><category term="안드로이드" /><category term="앱" /><category term="SQLite" /><summary type="html"><![CDATA[NeoMindStd/BrainManager 프로젝트]]></summary></entry><entry><title type="html">웹 디자인-헬스가든</title><link href="https://redniche.github.io/posts/%EC%9B%B9-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%97%AC%EC%8A%A4%EA%B0%80%EB%93%A0/" rel="alternate" type="text/html" title="웹 디자인-헬스가든" /><published>2022-03-20T21:43:00+09:00</published><updated>2022-03-21T00:50:12+09:00</updated><id>https://redniche.github.io/posts/%EC%9B%B9-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%97%AC%EC%8A%A4%EA%B0%80%EB%93%A0</id><content type="html" xml:base="https://redniche.github.io/posts/%EC%9B%B9-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%97%AC%EC%8A%A4%EA%B0%80%EB%93%A0/"><![CDATA[<h2 id="헬스가든이란">헬스가든이란?</h2>

<p>㈜ 바이오앤라이프에서 운영하는 온라인 쇼핑몰입니다.</p>

<p><a href="https://blog.naver.com/kwak5336">https://blog.naver.com/kwak5336</a></p>

<p>와 같이 홍보용 블로그를 운영하면서 여러 한방제품들을 판매하는 회사입니다.</p>

<h2 id="개발-배경">개발 배경</h2>

<p>제가 학부 4학년 때 교외 국가 근로를 진행하면서 위의 업체에서 근로를 진행했었는데 사장님이 저의 개발 능력으로 홈페이지 재단장을 요청하셔서 진행했습니다.</p>

<p>보통 국가 근로를 하면서 이런 일을 하지는 않지만 저는 이것 또한 경험을 넓히고 사회에 공헌하는 기회라 생각하여 잘 만들어 보기 위해 노력했습니다.</p>

<h2 id="개요">개요</h2>

<table>
    <th>범주</th>    
    <th>스택</th>
    <tr>
        <td>언어</td>
        <td><img src="https://img.shields.io/badge/HTML-007ACC?style=flat&amp;logo=html5&amp;logoColor=white" /><img src="https://img.shields.io/badge/JavaScript-007ACC?style=flat&amp;logo=JavaScript&amp;logoColor=white" /><img src="https://img.shields.io/badge/CSS-007ACC?style=flat&amp;logo=CSS3&amp;logoColor=white" /></td>
    </tr>
    <tr>
        <td>개발환경</td>
        <td><img src="https://img.shields.io/badge/Visual Studio Code-007ACC?style=flat&amp;logo=VisualStudioCode&amp;logoColor=white" /></td>
    </tr>
    <tr>
        <td>호스팅</td>
        <td><img src="https://img.shields.io/badge/CAFE24-웹호스팅업체-007ACC?style=flat&amp;logo=Buy Me A Coffee&amp;logoColor=white" /></td>
    </tr>
</table>

<h2 id="결과물">결과물</h2>

<p>사이트 링크: <a href="https://health-garden.shop/">https://health-garden.shop/</a></p>

<p><img src="/assets/img/portfolio/subproject/웹디자인헬스가든/메인1.png" alt="메인1" />
<img src="/assets/img/portfolio/subproject/웹디자인헬스가든/메인2.png" alt="메인2" /></p>]]></content><author><name>redniche yechankun</name></author><category term="포트폴리오" /><category term="서브프로젝트" /><category term="니체" /><category term="예찬군" /><category term="웹디자인" /><category term="Cafe24" /><category term="웹호스팅" /><summary type="html"><![CDATA[헬스가든이란?]]></summary></entry><entry><title type="html">핑 모니터링 툴 개발</title><link href="https://redniche.github.io/posts/%ED%95%91-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%ED%88%B4-%EA%B0%9C%EB%B0%9C/" rel="alternate" type="text/html" title="핑 모니터링 툴 개발" /><published>2022-03-20T21:43:00+09:00</published><updated>2022-03-20T21:43:00+09:00</updated><id>https://redniche.github.io/posts/%ED%95%91-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%ED%88%B4-%EA%B0%9C%EB%B0%9C</id><content type="html" xml:base="https://redniche.github.io/posts/%ED%95%91-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%ED%88%B4-%EA%B0%9C%EB%B0%9C/"><![CDATA[<h2 id="rednicheping-monitoring-프로젝트">redniche/Ping-Monitoring 프로젝트</h2>

<p><a href="https://github.com/redniche/Ping-Monitoring">깃허브 링크</a></p>

<h2 id="소개">소개</h2>

<p>인터넷의 특정 네트워크 기기와의 핑테스트를 위해 만들어진 프로그램입니다.<br />
인트라넷 상황에서 내부망을 관제해야할 때 사용하고자 진행했습니다. 하지만 결국 핑 모니터링 툴이기 때문에 모든 환경에서 사용할 수 있습니다.</p>

<p>Thread를 사용해 여러 ip주소에 핑테스트를 할 수 있게 개발했는데 덕분에 스레드에 대한 이해를 높일 수 있었습니다.<br />
다만 공유자원의 교착상태를 막기 위해 Semaphore를 사용했는데 이 당시에만 해도 async await에 대해 제대로 알지 못하는 상태에서 이를 사용해서 제대로 활용하지 못한 점이 아쉬움으로 남아 있습니다.</p>

<h2 id="기술스택">기술스택</h2>

<table>
    <th>범주</th>    
    <th>스택</th>
    <tr>
        <td>언어</td>
        <td><img src="https://img.shields.io/badge/C%23-007ACC?style=flat&amp;logo=CSharp&amp;logoColor=white" /></td>
    </tr>
    <tr>
        <td>프레임워크</td>
        <td><img src="https://img.shields.io/badge/.Net Framework-007ACC?style=flat&amp;logo=DotNet&amp;logoColor=white" /></td>
    </tr>
</table>

<h2 id="개발-환경">개발 환경</h2>

<ul>
  <li>Framework: .Net Framework 4.7.1</li>
  <li>IDE: Visual Studio 2019(back up)</li>
  <li>Language: C#</li>
</ul>

<hr />

<h2 id="사용법">사용법</h2>

<p><img src="/assets/img/portfolio/subproject/핑모니터링툴/초기화면.png" alt="실행" /></p>

<p><img src="/assets/img/portfolio/subproject/핑모니터링툴/실행화면.png" alt="실행" /></p>

<h3 id="지원기능">지원기능</h3>

<h4 id="네트워크-모니터링">네트워크 모니터링</h4>

<ul>
  <li>망이름 (공백 혹은 Tabs) 1.1.1.1(ip형식)</li>
  <li>1.1.1.1(ip형식)</li>
</ul>

<p>과 같이 입력 후 Start 버튼 클릭. Start를 누르면 입력창은 전부 *로 변합니다.</p>

<p>핑 모니터링 목록은 열과 행으로 구분되는데 줄바꿈으로 열을 추가합니다.</p>

<p>핑상태는 라벨의 색으로 구분합니다.
초록색: 핑 100 이하<br />
주황색: 핑 200 이하<br />
빨간색: 핑 200 초과<br />
보라색: 연결불가</p>

<h4 id="투명도-조절">투명도 조절</h4>

<p>화면의 투명도를 아래의 스크롤바를 이용해 변경할 수 있습니다.</p>

<h4 id="ip-노출-방지">IP 노출 방지</h4>

<p>화면에 표시된 IP 주소는 모두 *로 처리됩니다.
모니터링 정지시에는 비밀번호가 필요합니다. ‘예찬3’<br />
3번 틀릴시 프로그램 강제 종료됩니다.</p>

<p>비밀번호 갱신 기능은 필요시 업데이트 예정입니다.</p>]]></content><author><name>redniche yechankun</name></author><category term="포트폴리오" /><category term="서브프로젝트" /><category term="니체" /><category term="예찬군" /><category term="C#" /><category term="Ping" /><category term="핑툴" /><summary type="html"><![CDATA[redniche/Ping-Monitoring 프로젝트]]></summary></entry><entry><title type="html">수상기록 모음</title><link href="https://redniche.github.io/posts/%EC%88%98%EC%83%81%EA%B8%B0%EB%A1%9D-%EB%AA%A8%EC%9D%8C/" rel="alternate" type="text/html" title="수상기록 모음" /><published>2022-03-20T18:36:00+09:00</published><updated>2022-03-20T20:55:02+09:00</updated><id>https://redniche.github.io/posts/%EC%88%98%EC%83%81%EA%B8%B0%EB%A1%9D-%EB%AA%A8%EC%9D%8C</id><content type="html" xml:base="https://redniche.github.io/posts/%EC%88%98%EC%83%81%EA%B8%B0%EB%A1%9D-%EB%AA%A8%EC%9D%8C/"><![CDATA[<h2 id="삼성-sw-아카데미-공통-프로젝트-최우수상">삼성 SW 아카데미 공통 프로젝트 최우수상</h2>

<p>상장 교부 전</p>

<h3 id="수상-요약">수상 요약</h3>

<p>삼성 청년 소프트웨어 아카데미의 2학기 공통 프로젝트에서
Unity 기반의 웹RTC 멀티플레이 게임을 개발해 최우수 팀으로 선정됨.</p>

<h3 id="프로젝트-깃">프로젝트 깃</h3>

<p><a href="https://github.com/redniche/INCRIME">https://github.com/redniche/INCRIME</a></p>

<h3 id="개요">개요</h3>

<table>
  <thead>
    <tr>
      <th>인원</th>
      <th>5</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>개발 기간</td>
      <td>2022.01.10~ 2022.02.18</td>
    </tr>
    <tr>
      <td>개발 환경 요약</td>
      <td>Unity<br />Node.js Express<br />MySQL</td>
    </tr>
    <tr>
      <td>프로젝트 소개 링크</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<blockquote>
  <h3 id="후기">후기</h3>

  <p>개발을 진행하면서 기술적인 배움 뿐만 아니라 디스코드와 노션을 활용한 정보 공유, 개발 계획 관리, 버그 해결까지 효과적으로 마무리한 프로젝트입니다.<br />
이후에 진행하는 프로젝트에서 깃, Jira, 디스코드, 노션 등 여러 도구를 활용한 현업 수준의 프로젝트를 진행하는 것에 도움이 되었습니다.</p>
</blockquote>

<h2 id="삼성-sw-아카데미-프로젝트-우수상">삼성 SW 아카데미 프로젝트 우수상</h2>

<p><img src="/assets/img/portfolio/outdoor/awards/1.png" alt="프로젝트 우수상" /></p>

<h3 id="수상-요약-1">수상 요약</h3>

<p>삼성 청년 소프트웨어 아카데미에서 1학기 공통 진행 프로젝트인
공공데이터를 이용한 HappyHouse 서비스 주제의 프로젝트에서 우수팀으로 선정됨.</p>

<h3 id="프로젝트-깃-1">프로젝트 깃</h3>

<p><a href="https://github.com/redniche/HappyHouseProject">https://github.com/redniche/HappyHouseProject</a></p>

<h3 id="개요-1">개요</h3>

<table>
  <thead>
    <tr>
      <th>인원</th>
      <th>2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>개발 기간</td>
      <td>2021.11.18 ~ 2021.11.25</td>
    </tr>
    <tr>
      <td>개발 환경 요약</td>
      <td>Spring Boot<br />MySQL<br />Vue.js</td>
    </tr>
    <tr>
      <td>핵심 기능</td>
      <td>Kakao Map, Jsoup 크롤링, 공공데이터 API</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <h3 id="후기-1">후기</h3>

  <p>일주일의 짧은 기간동안 일정관리, 명세서 기반의 프로젝트 진행, Notion과 Git을 활용한 애자일적인 소프트웨어 개발 등을 경험했습니다.<br />
현실에선 항상 시간이 넉넉한 것은 아닐 수 있습니다. 저희는 데드라인이 아주 짧은 프로젝트에서도 유용한 결과물을 만들어내는 역량을 기를 수 있었습니다.</p>
</blockquote>

<h2 id="삼성-sw-아카데미-1학기-성적우수상">삼성 SW 아카데미 1학기 성적우수상</h2>

<p><img src="/assets/img/portfolio/outdoor/awards/2.png" alt="성적 우수상" /></p>

<h3 id="수상-요약-2">수상 요약</h3>

<p>삼성 청년 소프트웨어 아카데미에서 우수한 성적으로 1학기 교육을 이수함.</p>

<h3 id="개요-2">개요</h3>

<table>
  <thead>
    <tr>
      <th>인원</th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>기간</td>
      <td>2021.07.07 ~ 2021.11.26</td>
    </tr>
    <tr>
      <td>교육 과정 요약</td>
      <td>JAVA<br /> 알고리즘<br />DB<br />Web<br /> HTML, JavaScript, CSS <br />SPA Framework: Vue.js</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <h3 id="후기-2">후기</h3>

  <p>삼성 청년 SW 아카데미에 입과하고 상당히 빠르게 시간이 지나갔습니다. 교육 중에 아주 바쁘다는 것을 완전히 체감할 수 있었습니다.<br />
저는 게으른 점이 조금 있습니다. 이를 개선하기 위해 삼성의 현업 멘토님들께 질문하고 답변 받은 일정관리 법으로 대략적인 일정을 관리하며 배운 것들을 다시 곱씹는 방식으로 성적을 유지했고 성적 우수상을 받을 수 있었습니다.</p>
</blockquote>

<h2 id="육군혁신-아이디어-콘테스트-표창">육군혁신 아이디어 콘테스트 표창</h2>

<p><img src="/assets/img/portfolio/outdoor/awards/3.png" alt="아이디어 공모전 표창" /></p>

<h3 id="수상요약">수상요약</h3>

<p>육군혁신 “뿜뿜” 콘테스트에서 창의적인 아이디어, 전투발전소요 제언을 통해 육군에 기여한 공을 인정받아 표창됨.</p>

<h3 id="개요-3">개요</h3>

<table>
  <thead>
    <tr>
      <th>인원</th>
      <th>1</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>기간</td>
      <td>2018.06.24 ~ 2021.07.14</td>
    </tr>
    <tr>
      <td>공모내용</td>
      <td>그리드 컴퓨팅 <br />- 목표: 육군 전술서버의 자산 부족 해결, 24시간 켜져있는 클라이언트 컴퓨터 활용<br />- 내용: 서버 처리를 클라이언트에서 분산 처리하는 기술 제안<br />클라이언트 기반 처리<br />- 목표: 모든 데이터 로직을 서버에서 처리하는 기존 구조 개선<br />- 내용: SSR 방식의 클라이언트를 CSR로 전환 제안</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <h3 id="후기-3">후기</h3>

  <p>당시 서버 운용 시 문제가 되는 구조를 지적하고 클라이언트 처리를 늘리는 방향의 제안서를 작성했습니다.<br />
또한 그리드 컴퓨팅에 대한 논문들을 읽고 해당 기술들의 순차적 도입과 방향을 제안하며 참고문헌으로 활용하여 제안을 뒷받침했습니다.<br />
여단장 분들 앞에서 발표를 진행했는데 발표를 할 때 어떻게 청중의 수준에 맞출 수 있을지 고민을 하면서 시각적인 자료를 준비했고 발표를 만족스럽게 진행할 수 있었습니다.</p>
</blockquote>]]></content><author><name>redniche yechankun</name></author><category term="포트폴리오" /><category term="대외활동" /><category term="니체" /><category term="예찬군" /><category term="수상기록" /><category term="삼성SW아카데미" /><category term="아이디어" /><category term="공모전" /><summary type="html"><![CDATA[삼성 SW 아카데미 공통 프로젝트 최우수상]]></summary></entry><entry><title type="html">신경망 숫자 인식기</title><link href="https://redniche.github.io/posts/%EC%8B%A0%EA%B2%BD%EB%A7%9D-%EC%88%AB%EC%9E%90-%EC%9D%B8%EC%8B%9D%EA%B8%B0/" rel="alternate" type="text/html" title="신경망 숫자 인식기" /><published>2022-03-14T23:23:00+09:00</published><updated>2022-03-21T00:11:57+09:00</updated><id>https://redniche.github.io/posts/%EC%8B%A0%EA%B2%BD%EB%A7%9D-%EC%88%AB%EC%9E%90-%EC%9D%B8%EC%8B%9D%EA%B8%B0</id><content type="html" xml:base="https://redniche.github.io/posts/%EC%8B%A0%EA%B2%BD%EB%A7%9D-%EC%88%AB%EC%9E%90-%EC%9D%B8%EC%8B%9D%EA%B8%B0/"><![CDATA[<h2 id="rednicheneural-number-recognition-프로젝트">redniche/Neural-Number-Recognition 프로젝트</h2>

<p><a href="https://github.com/redniche/Neural-Number-Recognition">깃허브 링크</a></p>

<h2 id="소개">소개</h2>

<p>정사각형 데이터패턴으로 이루어진 숫자를 인식하는 다층 퍼셉트론 기반 신경망입니다. 숫자가 아니어도 패턴을 유추해낼 수 있습니다.
학습과 질의를 위해 MNIST 데이터셋을 사용하는 것을 추천합니다.</p>

<p>대학생 때 알파고가 이세돌을 이기는 것을 보고 AI 기술이 벌써 이만큼 발전했나 느끼곤 어떻게 저런 것을 만들 수 있을지 연구하는겸 군대에서부터 전역하고 제작하게 되었습니다.</p>

<p>MNIST 데이터셋 60000개를 학습하고<br />
MNIST 데이터셋 10000개의 테스트 데이터에 대해 대략 97%의 정확도를 보입니다.</p>

<p>프로젝트 진행기간 2016년 10월~12월, 2018년 11월</p>

<h2 id="기술스택">기술스택</h2>

<p><img src="https://img.shields.io/badge/C%23-007ACC?style=flat&amp;logo=CSharp&amp;logoColor=white" /></p>

<p><img src="https://img.shields.io/badge/.Net Framework-007ACC?style=flat&amp;logo=DotNet&amp;logoColor=white" /></p>

<h2 id="build-environment">Build Environment</h2>

<ul>
  <li>Framework: .Net Framework 4.7.1</li>
  <li>IDE: Visual Studio 2019</li>
  <li>Language: C#</li>
</ul>

<hr />

<h2 id="데이터셋">데이터셋</h2>

<ul>
  <li><a href="https://pjreddie.com/projects/mnist-in-csv/">MNIST in CSV 링크</a>의 train set, test set 같은 형식의 csv 파일</li>
  <li>파일명이 정답인 이미지 파일(.png, .jpg, .jpeg 형식)
    <ul>
      <li>예시) 1.png, 2.jpg</li>
    </ul>
  </li>
</ul>

<h2 id="주요-사용법">주요 사용법</h2>

<p><img src="/assets/img/portfolio/subproject/신경망숫자인식기/신경망초기화.gif" alt="주요 사용법1" /></p>

<h3 id="help"><code class="language-plaintext highlighter-rouge">Help</code></h3>

<p>도움말을 보여줍니다.</p>

<h3 id="create"><code class="language-plaintext highlighter-rouge">Create</code></h3>

<p>신경망을 생성합니다.<br />
본 예제에서는 은닉층이 200노드고 출력이 10개(숫자 수)인 이미지(가로세로 28px)를 인식할 수 있는 신경망 객체를 생성합니다.</p>

<h3 id="showstatus"><code class="language-plaintext highlighter-rouge">ShowStatus</code></h3>

<p>신경망의 상태를 확인합니다. 대략적인 신경망 객체의 정보를 볼 수 있습니다.</p>

<h3 id="csvtrain"><code class="language-plaintext highlighter-rouge">CsvTrain</code></h3>

<p><img src="/assets/img/portfolio/subproject/신경망숫자인식기/Csv학습.gif" alt="주요 사용법1" /></p>

<p>csv파일로 신경망을 학습시킬 수 있습니다.<br />
예시 학습용 csv파일: <a href="https://pjreddie.com/media/files/mnist_train.csv">링크</a></p>

<h3 id="csvquery"><code class="language-plaintext highlighter-rouge">CsvQuery</code></h3>

<p><img src="/assets/img/portfolio/subproject/신경망숫자인식기/Csv질의.gif" alt="주요 사용법1" /></p>

<p>학습된 신경망 객체를 csv파일로 테스팅할 수 있습니다.<br />
csv파일로 신경망에 질의하는 명령입니다.<br />
대용량 테스팅을 할 때 활용할 수 있으며 쿼리의 세부 결과는 로그로 남습니다.<br />
예시 테스팅용 csv파일: <a href="https://pjreddie.com/media/files/mnist_test.csv">링크</a></p>

<h3 id="imagequery"><code class="language-plaintext highlighter-rouge">ImageQuery</code></h3>

<p><img src="/assets/img/portfolio/subproject/신경망숫자인식기/이미지쿼리.gif" alt="주요 사용법1" /></p>

<p>학습된 신경망 객체를 이미지 파일로 테스팅할 수 있습니다.<br />
png, jpg, jpeg 파일을 지원합니다. 여러 파일을 한 번에 테스팅 할 수 있습니다.
쿼리의 결과가 콘솔창에 그대로 나타납니다.</p>

<h3 id="save"><code class="language-plaintext highlighter-rouge">Save</code></h3>

<p><img src="/assets/img/portfolio/subproject/신경망숫자인식기/신경망저장.gif" alt="주요 사용법1" /></p>

<p>신경망 객체를 저장할 수 있습니다.</p>

<h3 id="open"><code class="language-plaintext highlighter-rouge">Open</code></h3>

<p><img src="/assets/img/portfolio/subproject/신경망숫자인식기/신경망불러오기.gif" alt="주요 사용법1" /></p>

<p>저장된 신경망 객체를 로드합니다.
예제 테스트 데이터에 대해 대략 97%의 정확도를 보여주는 신경망 객체 파일을 제공합니다.<br />
<a href="https://github.com/redniche/Neural-Number-Recognition/blob/main/trained_file/my_train_data.neu">신경망 객체 파일.neu</a></p>

<h2 id="과거-코드">과거 코드</h2>

<p>제 블로그입니다.
<a href="https://blog.naver.com/redniche/221401615403">블로그 링크</a></p>]]></content><author><name>redniche yechankun</name></author><category term="포트폴리오" /><category term="서브프로젝트" /><category term="니체" /><category term="예찬군" /><category term="C#" /><category term="신경망" /><category term="다층퍼셉트론" /><category term="숫자인식기" /><category term="MNIST" /><summary type="html"><![CDATA[redniche/Neural-Number-Recognition 프로젝트]]></summary></entry><entry><title type="html">고교 창원대학교 연계 악보인식 R&amp;amp;E 프로젝트</title><link href="https://redniche.github.io/posts/%EA%B3%A0%EA%B5%90-%EC%B0%BD%EC%9B%90%EB%8C%80%ED%95%99%EA%B5%90-%EC%95%85%EB%B3%B4%EC%9D%B8%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/" rel="alternate" type="text/html" title="고교 창원대학교 연계 악보인식 R&amp;amp;E 프로젝트" /><published>2022-03-09T17:54:00+09:00</published><updated>2022-03-21T00:11:57+09:00</updated><id>https://redniche.github.io/posts/%EA%B3%A0%EA%B5%90-%EC%B0%BD%EC%9B%90%EB%8C%80%ED%95%99%EA%B5%90-%EC%95%85%EB%B3%B4%EC%9D%B8%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8</id><content type="html" xml:base="https://redniche.github.io/posts/%EA%B3%A0%EA%B5%90-%EC%B0%BD%EC%9B%90%EB%8C%80%ED%95%99%EA%B5%90-%EC%95%85%EB%B3%B4%EC%9D%B8%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/"><![CDATA[<h2 id="프로젝트-기술스택">프로젝트 기술스택</h2>

<table>
  <tr>
    <th>개발 IDE</th>
    <td><img src="https://img.shields.io/badge/Visual Studio Code-007ACC?style=plastic&amp;logo=Visual Studio Code&amp;logoColor=white" /></td>
  </tr>
  <tr>
    <th>언어</th>
    <td><img src="https://img.shields.io/badge/C Language-007ACC?style=plastic&amp;logo=C&amp;logoColor=white" /> </td>
  </tr>
  <tr>
    <th>활용 라이브러리</th>
    <td><img src="https://img.shields.io/badge/Open CV-5C2D91?style=plastice&amp;logo=OpenCV&amp;logoColor=white" /> </td>
  </tr>
</table>

<h2 id="고등학교">고등학교</h2>

<p><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_1.jpg" alt="고등학교 사진" /><br />
제가 2012년 3월부터 2015년 2월까지 3년간 신세를 진 고등학교입니다. 진해에 있는 고등학교인데 진짜 열심히 가르칩니다. <code class="language-plaintext highlighter-rouge">진고</code><br />
다만 같이 입학한 학생들이 이미 서로 친한 경우(중학교-고등학교 같은 지역)가 많기 때문에 타지 학생들은 조금 불편할 수 있습니다 ㅜㅜ</p>

<blockquote>
  <p>저는 타지에서 입학해 적응에 조금 어려움을 겪고 좋은 일도 나쁜 일도 많았지만 다 소중한 추억으로 남았던 곳이기도 합니다</p>
</blockquote>

<p><br /></p>

<h2 id="re과학영재-창의연구를-어떻게-하게-되었는가">R&amp;E(과학영재 창의연구)를 어떻게 하게 되었는가?</h2>

<p>2013년에 특이하게 고등학교에서 창원대 영재교육원과 MOU(업무협약: <a href="https://www.sisamagazine.co.kr/news/articleView.html?idxno=12054">기사링크</a>)를 맺고 창원대학교와 R&amp;E를 진행하기 시작했는데 이 때 컴퓨터공학부와 연계가 되길래 관심있는 학생들을 대상으로 인원들을 모집했던 경험이 있습니다. 결과는 당시 2학년인 나와 1학년 후배 3명이 팀으로 참가하게 되었습니다.</p>

<p><br /></p>

<h2 id="re-주제-선정-배경">R&amp;E 주제 선정 배경</h2>

<p>결과적으로 우리는 ‘악보 인식 프로그램’을 제작하는 주제를 선정했습니다.
이를 선정한 이유에 대해 당시 결과 보고서를 인용해보자면</p>

<blockquote>
  <p>현재에 경향에 맞춰 사람들이 유행을 따르게 되어 소외된 분야들도 많이 있다. 우리는 그러한 것들을 조금이나마 해결해 보고자 이번 R&amp;E를 구성하게 되었다. 좀 더 나은 미래를 위해 우리가 걸어야하는 길이 무엇인지, 작은 팀이 얼마나 많은 성과를 낼 수 있는지 알고 싶었다.</p>
</blockquote>

<blockquote>
  <p>근래에 컴퓨터 기술이 발달하며 악보영상을 자동으로 인식하고 연주해 주는 악보 인식(Music score Recognition) 시스템에 관한 연구가 많이 진행되었다. 대부분의 연구들이 상당한 성과를 얻어내었고 높은 가치를 가지고 있다. 하지만 최근 들어 이 시스템에 관한 연구가 드물어지고 있으며 진행이 매우 더디어지고 있다. 악보 자동 인식에 대한 연구는 1960년대 후반부터 시작되었으나, 악보의 복잡성과 다양성으로 인하여 아직까지 모든 형태의 악보를 인식할 수 있는 일반적인 악보 인식 시스템은 존재하고 있지 않으며, 기존의 악보 인식 방법들은 인식 속도가 느리고 인식률이 낮은 단점이 있다.</p>
</blockquote>

<p>라고 기록되어 있습니다. 정보를 더하자면 당시 고등학생 1, 2학년인 우리들은 컴퓨터 과학에 대해 배경지식이 적었고 할 수 있는 것들 또한 매우 적었습니다.<br />
따라서 당시 정성환 지도교수 님에게 C언어에 대한 기초적인 교육을 받았고 배종욱 박사 님이 OpenCV로 연구를 진행하고 있던 영상 인식 기술에서 영감을 받아 이 주제를 선정하게 되었습니다.</p>

<h2 id="re-활동-내용">R&amp;E 활동 내용</h2>

<h3 id="c-opencv-학습">C, OpenCV 학습</h3>

<p><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_2.png" alt="C언어 구구단" /></p>

<p>당시 지도교수 님에게 교육받았던 내용 중 일부입니다. C언어의 기초 문법, 포인터, 파일 입출력에 대해 교육받았습니다.
이후에는 배종욱 박사 님에게 우리의 주제를 위한 OpenCV 교육을 받았는데 대표적으로 아래와 같이 교육받고 실험(실습?)해보며 R&amp;E를 진행했습니다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_3.png" alt="태극기 띄우기" /></th>
      <th style="text-align: left"><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_4.png" alt="얼굴 인식" /></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">OpenCV라이브러리를 통해 태극기 출력</td>
      <td style="text-align: left">OpenCV로 웹캠 연결 및 웹캠을 통한 얼굴 인식 <br /> (배종욱 박사님입니다 ㅎㅎ)</td>
    </tr>
  </tbody>
</table>

<h3 id="악보인식-프로그램-제작-과정">악보인식 프로그램 제작 과정</h3>

<p>주제를 위해 교육받은 내용을 바탕으로 개발을 시작했습니다.
당시에 대학교의 실습용 컴퓨터에서만 작업을 했었는데 이제와서 찾아보니 아쉽게도 코드 작업물들이 남지를 않아 아쉬움이 있네요…<br />
프로젝트를 위해 다음의 3가지를 처음 기획했고 구현했습니다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">넘버</th>
      <th style="text-align: left">기능</th>
      <th style="text-align: center">구현</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">1</td>
      <td style="text-align: left">컴퓨터 비전 기술을 이용한 악보에서의 음표 추출</td>
      <td style="text-align: center">O</td>
    </tr>
    <tr>
      <td style="text-align: center">2</td>
      <td style="text-align: left">사람의 눈 대신 카메라를 이용하여 악보영상을 처리</td>
      <td style="text-align: center">X</td>
    </tr>
    <tr>
      <td style="text-align: center">3</td>
      <td style="text-align: left">자동음악 연주 시스템 개발을 위한 기반</td>
      <td style="text-align: center">△</td>
    </tr>
  </tbody>
</table>

<h4 id="음표-추출-시스템-구성도">음표 추출 시스템 구성도</h4>

<p><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_5.png" alt="음표 추출 시스템 구성도" /></p>

<ol>
  <li>
    <p>악보의 전처리 및 잡음제거</p>

    <p>악보의 원할한 인식을 위해 원본 이미지에서 이진 영상으로 변환, 모폴로지(팽창-&gt;축소)를 이용해 전처리<br />
<img src="/assets/img/portfolio/subproject/창원대프로젝트/1_6.png" alt="전처리 과정" /></p>

    <p>잡음이란 검출하고자 하는 것 이외의 모든 것을 말합니다<br />
악보영상에서의 잡음으로는 조표, 음자리표, 제목, 가사, 코드, 마디 등 존재</p>

    <p><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_7.png" alt="악보의 잡음제거" /></p>

    <p>레이블링: 인접한 화소에 번호를 매겨 하나의 그룹으로 만드는 작업<br />
레이블링을 통해 일정 크기(넓이)보다 작은 그룹을 제거하여 잡음을 제거 했습니다.</p>
  </li>
  <li>
    <p>기울어짐 보정</p>

    <p>기울어짐을 보정하기 위해서 조금 테크니컬한 방식이 필요했는데 직선을 검출하기 위해서 잡음이 제거된 이진 영상에서 모폴로지를 한 번 더 진행해서 오선을 제거하고 이를 비트 연산을 통해 음표부분만 제거된 화면을 얻었어야 했습니다.</p>

    <p><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_8.png" alt="기울어짐 보정1" /></p>

    <p>그 후 허프 변환을 활용해 직선의 기울기를 검출 했습니다.<br />
<img src="/assets/img/portfolio/subproject/창원대프로젝트/1_9.png" alt="기울어짐 보정2 허프변환" /><br />
<img src="/assets/img/portfolio/subproject/창원대프로젝트/1_10.png" alt="기울어짐 보정3" />
그 결과로 우리는 위와 같이 기울기가 보정된 화면을 얻을 수 있었습니다.</p>
  </li>
  <li>
    <p>오선 인식 및 제거</p>

    <p>오선 인식을 해야 이를 제거하고 음표의 위치를 알고 어떤 음표인지 알 수 있기 때문에 오선 인식이 필요했습니다.<br />
오선 인식은 OpenCV의 히스토그램를 반환받을 수 있는 calcHist() 함수를 활용해서 진행했습니다.<br />
<img src="/assets/img/portfolio/subproject/창원대프로젝트/1_11.png" alt="오선 인식" /></p>

    <p>위와 같이 영상의 가로 방향 픽셀값을 모두 더해 히스토그램을 출력하고 피크값을 찾아내 이를 오선의 수직 좌표로 활용했습니다.</p>

    <p><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_12.png" alt="오선 인식2" /></p>

    <p><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_13.png" alt="오선 제거" /></p>

    <p>결과적으로 이와 같이 각 줄별로 5개의 수직 좌표를 반환받을 수 있었고 이를 이용해 상하 픽셀값 유무를 체크하여 영역 색을 255로 변환했습니다.</p>
  </li>
  <li>
    <p>음표 추출</p>

    <p>음표가 어떤 것인지 어떤 음표인지 인식하기 위한 음표 추출이 필요 했습니다.<br />
음표 추출은 다음의 순서로 진행되었습니다.</p>

    <p>i. 비음표 제거<br />
ii. 잇단음표 분리<br />
iii. 음표의 추출</p>

    <p>i. 비음표 제거</p>

    <p><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_14.png" alt="비음표 제거1" /></p>

    <p><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_15.png" alt="비음표 제거1" /></p>

    <p>우선 비음표를 위와 같은 방식으로 제거했습니다.<br />
상기의 잡음 제거에서 했던 방식처럼 레이블링을 수행하고 비음표의 경우엔 자주 나오지 않기 때문에 그룹의 픽셀 값의 평균을 구한 뒤 편차치가 큰 것들을 제거하는 방식으로 제거할 수 있었습니다.</p>

    <p>ii. 잇단음표 분리</p>

    <p>현재까지 레이블링은 잇단음표를 하나로 인식합니다. 따라서 이를 분리하기 위해 히스토그램을 한 번 더 사용했습니다.</p>

    <p><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_16.png" alt="잇단음표 분리1" /></p>

    <p>위와 같이 이미지에서 세로 방향의 히스토그램을 그래프에서 앞 뒤 값으 130% 이상 검출 객체 높이의 60% 이상인 수치를 기준으로 Local Maxima(국부 최대값)를 추출해냈습니다.</p>

    <p><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_17.png" alt="잇단음표 분리2" /></p>

    <p><br />
여기까지 저희는 프로젝트를 진행했고 이후엔 이 실험과 프로젝트의 결과물로 3 종류의 음악 장르에 각각 10곡을 사용해 테스트를 진행해 보았습니다.</p>
  </li>
</ol>

<h2 id="테스트">테스트</h2>

<p>동요</p>

<ol>
  <li>옥수수 하모니카 2. 나무를 심자 3. 보물찾기 4. 다람쥐 5. 졸업식 노래</li>
  <li>고기잡이 7. 기찻길 옆 8. 꼬부랑 할머니 9. 바닷가에서</li>
  <li>반짝반짝 작은 별</li>
</ol>

<p>찬송가</p>

<ol>
  <li>만복의 근원 하나님 2. 이 천지간 만물들아 3. 거룩하신 하나님</li>
  <li>다 감사드리세 5. 복의 근원 강림하사 6. 즐겁게 안식한 날</li>
  <li>이 날은 주의 정하신 8. 우리의 주여 9. 오 만세 반석이신</li>
  <li>저 해와 달과 별들이</li>
</ol>

<p>발라드</p>

<ol>
  <li>다 줄꺼야 2. 벌써 일년 3. 사랑이 지나가면 4. 오래 전 그날</li>
  <li>사랑 빛 6.1 다행이다 7. 다행이다(회전) 8. 너에게로 또 다시</li>
  <li>보고싶다 10. 너를 위해</li>
</ol>

<p><img src="/assets/img/portfolio/subproject/창원대프로젝트/1_18.png" alt="테스트" /></p>

<h2 id="프로젝트-회고">프로젝트 회고</h2>

<p>본 연구는 컴퓨터 비전 기술을 이용해 악보 영상 처리를 연구했습니다.<br />
연구과정에서 악보의 인식까지 연구를 진행했고 당시 3가지 장르의 30곡의 임의의 악보에 대하여 약 85.2%의 인식률을 보였습니다.<br />
찬송가와 같이 화질이 좋은 경우 약 93% 이상의 인식률을 보였습니다.<br />
당시 사회 트렌드에서 조금 벗어난 주제이지만 이러한 기술 또한 발전되어야 전체 사회가 발전할 수 있다고 배종욱 박사님이 말씀해 주셨습니다.<br />
<code class="language-plaintext highlighter-rouge">덕분에 배종욱 박사 님의 영상처리 논문 관련에서도 도움이 되었다?고 하셨었습니다ㅋㅋ</code></p>

<p>여담으로<br />
본 프로젝트를 위해 고등학교 2학년 학업과 동시에 창원대학에 왔다 갔다 하는 시간을 쏟으니 내신 성적이 나빠진 부작용이 있었습니다.</p>

<p>하지만 처음으로 C언어가 어떤 것인지, 컴퓨터의 구조가 어떤 것인지 프로그래밍을 제대로 어떻게 하는지 배울 수 있었던 시간이었고 지금와서 이런 경험이 없었다면 제가 이때까지 프로그래밍에 열의를 가지고 계속 살아오지 못했을 것이란 생각이 남습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>포스트 코멘트
정말 과거의 기록을 이제와서 정리해보자니 참 이런저런 생각이 많이 남습니다.
특히 프로젝트가 끝나고 난 뒤에 보고서와 발표자료를 준비했었는데
이 때 3학년이 되어 학교에서 무언가 시키는 것이 많아 끝까지 함께하지 못한 것이 아쉬웠습니다.
최종 결과물은 후배들이 아주 열심히 만들어 주었다고 후일담으로 들었습니다.
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="프로젝트-결과물-파일">프로젝트 결과물 파일</h2>

<p><a href="/assets/docs/subproject/창원대프로젝트/창원대 R&amp;E 악보인식 프로젝트 최종.pptx">창원대 R&amp;E 악보인식 프로젝트 최종.pptx</a></p>

<p>감사합니다.</p>]]></content><author><name>redniche yechankun</name></author><category term="포트폴리오" /><category term="서브프로젝트" /><category term="니체" /><category term="예찬군" /><category term="C" /><category term="OpenCV" /><category term="창원대학교" /><category term="영상인식기술" /><category term="악보인식" /><summary type="html"><![CDATA[프로젝트 기술스택]]></summary></entry><entry><title type="html">Git 커밋 기록 유지하고 옮기기</title><link href="https://redniche.github.io/posts/git-%EC%BB%A4%EB%B0%8B-%EA%B8%B0%EB%A1%9D-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B3%A0-%EC%98%AE%EA%B8%B0%EA%B8%B0/" rel="alternate" type="text/html" title="Git 커밋 기록 유지하고 옮기기" /><published>2022-03-04T16:22:00+09:00</published><updated>2022-03-04T16:22:00+09:00</updated><id>https://redniche.github.io/posts/git-%EC%BB%A4%EB%B0%8B-%EA%B8%B0%EB%A1%9D-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B3%A0-%EC%98%AE%EA%B8%B0%EA%B8%B0</id><content type="html" xml:base="https://redniche.github.io/posts/git-%EC%BB%A4%EB%B0%8B-%EA%B8%B0%EB%A1%9D-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B3%A0-%EC%98%AE%EA%B8%B0%EA%B8%B0/"><![CDATA[<p><strong>GitHub, GitLab 등 서로 옮기기도 가능</strong></p>

<h2 id="일반적인-옮기기">일반적인 옮기기</h2>

<ol>
  <li>Bare 클론</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>git clone <span class="nt">--bare</span> 해당깃링크
<span class="nb">cd </span>클론된 깃 폴더
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>옮길 리포지토리에 푸시</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>git push <span class="nt">--mirror</span> 옮길 리포지토리 깃 링크
</pre></td></tr></tbody></table></code></pre></div></div>

<p><br /></p>

<h2 id="100mb-이상의-파일이-존재할경우-git-lfs-storage-사용-비과금시-1gb제한">100MB 이상의 파일이 존재할경우 (Git LFS Storage 사용. 비과금시 1GB제한)</h2>

<ol>
  <li><a href="https://git-lfs.github.com/">https://git-lfs.github.com/</a> 와 <a href="https://rtyley.github.io/bfg-repo-cleaner/">https://rtyley.github.io/bfg-repo-cleaner/</a> 사이트에 들어가서 다운로드 하기.</li>
  <li>복사하고자 하는 저장소(gitlab)의 clone을 생성합니다.</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>git clone <span class="nt">--mirror</span> 해당깃링크
<span class="nb">cd </span>클론된 깃 폴더
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>커밋 히스토리 내에서 large file을 찾아 트랙킹 합니다. “*.{zip,jar,mp4}” 중괄호 내의 파일은 트래킹을 할 파일 확장자 목록입니다.(이 확장자가 아닌 파일이 100mb를 넘으면 추가 작성)</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>git filter-branch <span class="nt">--tree-filter</span> <span class="s1">'git lfs track "*.{zip,jar,mp4}"'</span> <span class="nt">--</span> <span class="nt">--all</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>BFG를 이용하여 해당 파일들을 git lfs로 변경합니다. (bfg-1.14.0.jar 파일 다운로드 한 경로 지정.)
bfg-1.14.0.jar 사용이 잦을 것 같은 경우 고급시스템설정의 환경변수로 이 경로를 등록하면 편합니다.</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>java <span class="nt">-jar</span> <span class="o">[</span>경로]bfg-1.14.0.jar <span class="nt">--convert-to-git-lfs</span> <span class="s1">'*.zip'</span>
java <span class="nt">-jar</span> <span class="o">[</span>경로]bfg-1.14.0.jar <span class="nt">--convert-to-git-lfs</span> <span class="s1">'*.jar'</span>
java <span class="nt">-jar</span> <span class="o">[</span>경로]bfg-1.14.0.jar <span class="nt">--convert-to-git-lfs</span> <span class="s1">'*.mp4'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li>새로운 저장소(github)로 mirror-push를 진행합니다.</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>git push <span class="nt">--mirror</span> 옮길 리포지토리 깃 링크
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위와 같이 BFG와 LFS를 이용해서 깃허브를 옮기려면 깃 LFS 스토리지가 사용되며 이는 깃허브를 기준으론 용량제한 정책에 제한을 받습니다(무료기준 1GB). 모든 커밋내역에서 100MB가 넘는 파일의 변경사항을 추적하기 때문에 파일 표기 용량보다 많이 사용될 수 있습니다.</p>

<p>따라서 다음과 같이 하는 방법도 추천드립니다.(100mb 이상의 파일이 히스토리에서 삭제됨)</p>

<p><br /></p>

<h2 id="100mb이상-히스토리-모두-삭제-후-옮기기">100MB이상 히스토리 모두 삭제 후 옮기기</h2>

<ol>
  <li><strong>git bash를 엽니다.</strong></li>
  <li><strong>복사하고자 하는 저장소(gitlab)의 bare clone을 생성합니다.</strong></li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>git clone <span class="nt">--bare</span> 해당깃링크
<span class="nb">cd </span>클론된 깃 폴더
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li><strong>( 100MB 에러가 날 경우 ) 기존 Commit에서 100MB보다 큰 파일의 로그를 강제로 없애줘야 합니다.</strong></li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>java <span class="nt">-jar</span> <span class="o">[</span>경로]bfg-1.14.0.jar <span class="nt">--strip-blobs-bigger-than</span> 100M
</pre></td></tr></tbody></table></code></pre></div></div>

<ol>
  <li><strong>새로운 저장소(github)로 mirror-push를 진행합니다.</strong></li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>git push <span class="nt">--mirror</span> 옮길 리포지토리 깃 링크
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name></name></author><category term="개발" /><category term="Git" /><category term="니체" /><category term="예찬군" /><category term="깃" /><category term="Git" /><category term="도구" /><category term="깃허브" /><category term="깃랩" /><category term="커밋" /><category term="옮기기" /><category term="기록" /><category term="기록유지" /><summary type="html"><![CDATA[GitHub, GitLab 등 서로 옮기기도 가능]]></summary></entry><entry><title type="html">좋은 개발자가 되기 위한 방법론</title><link href="https://redniche.github.io/posts/%EC%A2%8B%EC%9D%80-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%B0%A9%EB%B2%95%EB%A1%A0/" rel="alternate" type="text/html" title="좋은 개발자가 되기 위한 방법론" /><published>2022-03-04T15:54:00+09:00</published><updated>2022-03-04T15:54:00+09:00</updated><id>https://redniche.github.io/posts/%EC%A2%8B%EC%9D%80-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%B0%A9%EB%B2%95%EB%A1%A0</id><content type="html" xml:base="https://redniche.github.io/posts/%EC%A2%8B%EC%9D%80-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%B0%A9%EB%B2%95%EB%A1%A0/"><![CDATA[<p><em>익명의 시니어 분이 제공해주셨습니다</em></p>

<h2 id="목차">목차</h2>

<h3 id="1---문제-해결-방법-3가지">1 - 문제 해결 방법 3가지</h3>

<ol>
  <li><a href="#실용적으로-문제-해결하기">실용적으로 문제 해결하기</a>
    <ul>
      <li><a href="#-공용코드-만들기">공용코드 만들기</a></li>
      <li><a href="#-코드의-생김새-다듬기">코드의 생김새 다듬기</a></li>
      <li><a href="#-사용자를-위한-코드-짜기">사용자를 위한 코드 짜기</a></li>
    </ul>
  </li>
  <li><a href="#도구를-만들고-개선하기">도구를 만들고 개선하기</a>
    <ul>
      <li><a href="#-자동화-하기">자동화 하기</a></li>
      <li><a href="#-질-좋은-문서-남기기">질 좋은 문서 남기기</a></li>
    </ul>
  </li>
  <li>
    <p><a href="#관계-쌓기">관계 쌓기</a></p>

    <ul>
      <li><a href="#-동료-사이-신뢰-쌓기">동료 사이 신뢰 쌓기</a></li>
      <li><a href="#-멘토--멘티-찾기">멘토 멘티 찾기</a></li>
      <li><a href="#-커뮤니티-활동으로-인맥--선택의-폭-넓히기">커뮤니티 활동으로 인맥 &amp; 선택의 폭 넓히기</a></li>
    </ul>
  </li>
  <li><a href="#해외-취업-팁">해외 취업 팁</a></li>
</ol>

<h3 id="실용적으로-문제-해결하기">실용적으로 문제 해결하기</h3>

<aside>
💡 "A 기능을 만들려고 하는데 참고할 만한 프로젝트가 있나요?"

"B와 비슷한 기능을 하는 코드가 있나요?"

</aside>

<h4 id="-공용코드-만들기">→ 공용코드 만들기</h4>

<ul>
  <li>Don’t Repeat Yourself</li>
  <li>‘지금 내가 겪는 문제는 동료도 똑같이 겪었다’</li>
  <li>모듈화</li>
  <li>오픈소스 활동</li>
</ul>

<aside>
💡 “기존 코드에 기능을 추가하려는데 너무 걸려요”

“버그를 고쳐야하는데 코드를 이해수가 없어요”

</aside>

<h3 id="-코드의-생김새-다듬기">→ 코드의 생김새 다듬기</h3>

<blockquote>
  <p>“Programs must be written for people to read, and only incidentally for machines to execute”<br />
- SICP -</p>
</blockquote>

<ul>
  <li>함수 짧게 만들기</li>
  <li>변수 이름 잘 짓기</li>
  <li>예외 상황 처리</li>
</ul>

<p>아래 두 코드를 서로 비교해보세요</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="nx">func</span> <span class="nx">doSomething</span><span class="p">()</span> <span class="p">{</span>

	<span class="kd">let</span> <span class="nx">blah</span> <span class="o">=</span> <span class="p">...</span>
	<span class="k">for</span> <span class="nx">item</span> <span class="k">in</span> <span class="nx">items</span> <span class="p">(</span>
		<span class="nx">print</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>

	<span class="p">}</span>

<span class="p">}</span>
<span class="kd">var</span> <span class="nx">myData</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span> <span class="nx">Data</span><span class="p">]</span>

<span class="kr">private</span> <span class="nx">func</span> <span class="nx">somethingElse</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
	<span class="k">return</span> <span class="dl">"</span><span class="s2">Hello World</span><span class="dl">"</span>
<span class="p">}</span>

<span class="nx">func</span> <span class="nx">justDoIt</span><span class="p">()</span> <span class="p">{</span>
<span class="c1">// whatever..</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">var</span> <span class="nx">myData</span><span class="p">:</span> <span class="p">[</span><span class="nb">String</span><span class="p">:</span> <span class="nx">Data</span><span class="p">]</span>

<span class="nx">func</span> <span class="nx">doSomething</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">let</span> <span class="nx">blah</span> <span class="o">=</span>

	<span class="k">for</span> <span class="nx">item</span> <span class="k">in</span> <span class="nx">items</span> <span class="p">{</span>
		<span class="nx">print</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="nx">func</span> <span class="nx">justDoIt</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// whatever..</span>
<span class="p">}</span>

<span class="kr">private</span> <span class="nx">func</span> <span class="nx">somethingElse</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
	<span class="k">return</span> <span class="dl">"</span><span class="s2">Hello World</span><span class="dl">"</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<aside>
💡 “앱이 / 웹사이트가 사용하기 너무 어려워요”
”A 기능과 B 기능 중 뭐가 더 나은지 모르겠어요”

</aside>

<h3 id="-사용자를-위한-코드-짜기">→ 사용자를 위한 코드 짜기</h3>

<ul>
  <li>내가 만든걸 쓸 사람의 입장이 되어보기</li>
  <li>백오피스, 플랫폼, 프론트엔드 등 다른 사용자 특성</li>
  <li>사이드 프로젝트 출시해보기</li>
  <li>사용자와 접점이 있는 모든 곳에 주목</li>
</ul>

<h2 id="도구를-만들고-개선하기">도구를 만들고 개선하기</h2>

<aside>
💡 “반복 작업에 시간을 너무 많이 낭비해요"

“매일/매주/매달 반복되는 작업이 너무 지루해요”

</aside>

<h3 id="-자동화-하기">→ 자동화 하기</h3>

<ul>
  <li>소프트웨어 배포 단계</li>
  <li>지속적 통합 / 지속적 배포</li>
</ul>

<aside>
💡 “테스트용 계정을 만들어야 하는데 어떻게 하나요?"

“이렇게 결정하게 된 근거가 뭔가요? 미팅에서 어떤 논의가 오고 갔나요?”

</aside>

<h3 id="-질-좋은-문서-남기기">→ 질 좋은 문서 남기기</h3>

<ul>
  <li>사내 시스템 사용법</li>
  <li>회의록, Action Items</li>
  <li>코드 아키텍처</li>
  <li>정보, 노하우 축적</li>
</ul>

<h2 id="관계-쌓기">관계 쌓기</h2>

<aside>
💡 “A를 새롭게 도입하고 싶은데 동료들을 어떻게 설득해야 하나요?"
“B가 더 좋은 방법/기술 인거 같은데 선임은 C를 하자고 해요"

</aside>

<h3 id="-동료-사이-신뢰-쌓기">→ 동료 사이 신뢰 쌓기</h3>

<ul>
  <li>절대적으로 우세한 기술이란건 거의 없다</li>
  <li>진심으로 동료의 성장과 행복에 신경 쓰기</li>
  <li>팀워크</li>
</ul>

<aside>
💡 “더 성장하고 싶은데 어떻게 해야할까요?"

“개발을 더 잘하고 싶어요"

</aside>

<h3 id="-멘토--멘티-찾기">→ 멘토 &amp; 멘티 찾기</h3>

<ul>
  <li>가까운 곳에서 시작해서 먼 곳으로 탐색</li>
  <li>원격근무의 시대: 온라인 멘토</li>
  <li>누군가의 멘토 되기</li>
</ul>

<aside>
💡 “이직을 하고 싶어요"

“개발자가 저 혼자라 외롭고 재미가 없어요”

</aside>

<h3 id="-커뮤니티-활동으로-인맥--선택의-폭-넓히기">→ 커뮤니티 활동으로 인맥 &amp; 선택의 폭 넓히기</h3>

<ul>
  <li>소모임 / 컨퍼런스 발표</li>
  <li>Google Developer Expert</li>
  <li>내부 추천채용(referral)</li>
  <li>관심사, 의견 공유</li>
</ul>

<h2 id="해외-취업-팁">해외 취업 팁</h2>

<h3 id="지역국가-선택-정보-많이-수집">지역/국가 선택, 정보 많이 수집</h3>

<p>(1) 그 나라에서의 삶은 어떨까?</p>

<p>나랑 잘 맞을까?</p>

<p>(2) 외국인에게 가장 중요한것: 비자(신분)</p>

<p>싱가폴: Employment Pass</p>

<p>미국: Visa (H-1B, E2, L, O-1 등)</p>

<h3 id="경력-쌓기-및-회사-지원">경력 쌓기 및 회사 지원</h3>

<p>(1) 경력이 많을수록 유리하나 극복</p>

<p>초년생부터 링크드인 관리</p>

<p>(2) 내부 직원 추천으로 지원</p>]]></content><author><name></name></author><category term="개발" /><category term="방법론" /><category term="니체" /><category term="예찬군" /><category term="좋은개발자" /><category term="좋은개발자방법론" /><category term="방법론" /><category term="해외" /><category term="취업" /><summary type="html"><![CDATA[익명의 시니어 분이 제공해주셨습니다]]></summary></entry><entry><title type="html">블록체인 [이더리움을 통해 맛보기] (4)</title><link href="https://redniche.github.io/posts/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8-%EC%9D%B4%EB%8D%94%EB%A6%AC%EC%9B%80%EC%9D%84-%ED%86%B5%ED%95%B4-%EB%A7%9B%EB%B3%B4%EA%B8%B0-4/" rel="alternate" type="text/html" title="블록체인 [이더리움을 통해 맛보기] (4)" /><published>2022-02-27T19:34:00+09:00</published><updated>2022-02-27T19:34:00+09:00</updated><id>https://redniche.github.io/posts/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8-%EC%9D%B4%EB%8D%94%EB%A6%AC%EC%9B%80%EC%9D%84-%ED%86%B5%ED%95%B4-%EB%A7%9B%EB%B3%B4%EA%B8%B0-4</id><content type="html" xml:base="https://redniche.github.io/posts/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8-%EC%9D%B4%EB%8D%94%EB%A6%AC%EC%9B%80%EC%9D%84-%ED%86%B5%ED%95%B4-%EB%A7%9B%EB%B3%B4%EA%B8%B0-4/"><![CDATA[<h1 id="좀-더-어려운-스마트-컨트랙-직접-만들어보기-feat-chainlink">좀 더 어려운 스마트 컨트랙 직접 만들어보기 (feat. Chainlink)</h1>

<p>지난 포스트에서 스마트 컨트랙을 Solidity로 작성하는 방법을 배웠습니다.<br />
그렇다면 이번엔 좀 더 구체적인 기능들이 있는 스마트 컨트랙을 작성하는 것을 해보도록 하겠습니다.</p>

<p>우선 앞으로 이 포스트 및 이외의 여러 스마트컨트랙 작성을 위해 꼭 필요한 배경지식을 잠깐 설명하겠습니다.</p>

<h2 id="solidity의-기능-추가-설명">Solidity의 기능 추가 설명</h2>

<h3 id="난수">난수</h3>

<p>스마트컨트랙트에서 여러 서비스(게임, 추첨 등)를 제공하기 위해 난수가 필요한 경우들이 있습니다.<br />
하지만 블록체인 상에서 난수를 발생시키는 것은 여러 위험성과 고려사항이 있습니다.</p>

<ul>
  <li>
    <p>난수를 생성하는 방법 2가지</p>

    <ul>
      <li>
        <p><em>keccak256 사용</em></p>

        <p>위 방법은 일반적으로 초심자들이 스마트컨트랙에서 난수를 발생시키기 위해 사용하는 방식입니다.<br />
다만 이 방식은 근본적으로 완전한 난수가 아니라 “의사 난수”이므로 외부에서 이를 예측하거나 조작하여 많은 피해가 발생한 사례들이 많습니다.</p>
      </li>
      <li>
        <p><em>Chainlink VRF 솔루션 사용</em></p>

        <p>위의 keccak256을 이용한 난수에서 발생하는 문제들을 해결하기 위해 이더리움 Layer2 솔루션인 Chainlink를 이용하는 방법입니다.<br />
이는 탈중앙화된 클라이언트들을 통해 완전히 예측 불가능한 난수를 반환하는 솔루션을 제공합니다.
다만 이를 사용하기 위해선 Chainlink의 모듈을 Solidity 내에 포함해야하며 이 솔루션의 난수를 반환받는 함수를 호출하기 위해 LINK라는 토큰이 추가적으로 필요합니다.</p>
      </li>
    </ul>
  </li>
</ul>

<p>난수의 생성엔 여러 방법들이 있겠으나 대표적인 두 방법을 확인해 보았습니다.<br />
우리는 이제 난수를 생성하고 활용하는 함수를 포함한 스마트 컨트랙을 만들어서 솔리디티를 배워봅시다</p>

<p><strong><em>근데 이렇게까지 억지로 기능을 넣어야만 했냐…?</em></strong></p>

<h1 id="기부금을-모으는-스마트컨트랙-만들어보기">기부금을 모으는 스마트컨트랙 만들어보기</h1>

<details>
  <summary style="font-size:24px"> 
  요구사항 (토글)
  </summary>
  <div>
    <ul>
      <li>FundRaising
        <ul>
          <li>개발환경 : Remix IDE</li>
          <li>기능 설명
            <ul>
              <li>일회성으로 동작하는 모금 컨트랙트</li>
              <li>일정기간 동안만 이더를 지불하여 모금에 참여할 수 있음
                <ol>
                  <li>모금</li>
                  <li>현재 모금액 확인</li>
                  <li>모금액 수령 기능</li>
                  <li>랜덤한 기부자의 주소와 기부금을 반환 (의사 난수 사용)</li>
                  <li>난수 값 요청 (Chainlink VRF 사용)</li>
                  <li>난수 값 수신 시 이로 랜덤한 기부자의 주소와 기부금을 이벤트로 반환 (Chainlink VRF 사용)</li>
                </ol>
              </li>
            </ul>
          </li>
          <li>소스 파일 레이아웃
            <ul>
              <li>파일 생성 (FundRaising.sol)</li>
              <li>라이선스 명시</li>
              <li>version pragma 명시</li>
              <li>import 선언 (체인링크 관련)</li>
              <li>contract 선언</li>
            </ul>
          </li>
          <li>생성자 선언
            <ul>
              <li>contract가 배포될 때 호출되는 특수 함수</li>
              <li>생성자 매개변수 추가 및 상태 변수에 저장
                <ul>
                  <li>체인링크 VRF를 사용하기 위한 기본 매개변수 추가
                    <ul>
                      <li>address vrfCoordinator, address link, bytes32 keyHash, uint256 fee 사용</li>
                      <li>VRFConsumerBase(vrfCoordinator, link) 활용</li>
                    </ul>
                  </li>
                  <li>컨트랙트 배포 시 모금 기간과 모금액 수령자를 지정하도록 변경</li>
                  <li>uint duration - 몇 초 동안 모금이 유효한지 의미 (3600 = 1시간)</li>
                  <li>정수형 연산자 ‘+’
                    <ul>
                      <li>현재 타임 스탬프 + duration을 fundRasingCloses의 값으로 지정</li>
                      <li>block.timestamp - 현재 블록의 유닉스 타임스탬프 값</li>
                    </ul>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li>상태 변수 추가
            <ul>
              <li>최소 모금액 지정
                <ul>
                  <li>기준 : 0.01ether</li>
                  <li>이더리움 기본 단위 wei
                    <ul>
                      <li>10^18wei = 1ether</li>
                      <li>1e16==0.01 ether == 10**16
                        <ul>
                          <li>단위 wei, ether등</li>
                          <li>** : 지수 연산자</li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li>종료 시점 지정</li>
              <li>모금 받을 주소 지정</li>
              <li>Chainlink VRF를 사용하기 위한 s_keyHash 지정</li>
              <li>Chainlink VRF를 사용하기 위해 사용할 가스량 지정</li>
            </ul>
          </li>
          <li>필수 함수
            <ol>
              <li>모금 - fund</li>
              <li>현재 모금액 - currentCollection</li>
              <li>모금액 수령 - withdraw</li>
              <li>랜덤한 기부자의 주소와 기부금을 반환 (의사 난수 사용) - selectRandomFunder</li>
              <li>난수 값 요청 (Chainlink VRF 사용) - selectRandomFunder2</li>
              <li>난수 값 수신 시 이로 랜덤한 기부자의 주소와 기부금을 이벤트로 반환 (Chainlink VRF 사용) - fulfillRandomness</li>
            </ol>
          </li>
          <li>fund()
            <ul>
              <li>요구사항
                <ol>
                  <li>0.01 ether 이상으로 모금에 참여할 수 있다.
                    <ul>
                      <li>이더를 받을 수 있는 payable 함수</li>
                    </ul>
                    <ul>
                      <li>msg.value
                        <ul>
                          <li>트랜잭션에 얼마를 보냈는 지 알 수 있는 전역 변수</li>
                        </ul>
                      </li>
                      <li>유효성 체크
                        <ul>
                          <li>전송한 이더가 최소 금액 조건을 만족하는지 판별</li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                  <li>지정된 모금 시간 이내에만 참여할 수 있다.
                    <ul>
                      <li>조건문 if</li>
                    </ul>
                    <ul>
                      <li>논리형 변수 : bool</li>
                      <li>논리 연산자 : ==, !=, &amp;&amp;, |
      - 모금 유효 시간인지 판별
      - 유효성 체크 함수</li>
                      <li>require(판별문, “에러 메시지”);</li>
                      <li>판별문이 true가 아닌 경우 “에러 메시지” 출력 후 함수 바로 종료</li>
                      <li>if문을 사용하는 것 보다 require를 사용하는 것이 훨씬 경제적이다.</li>
                    </ul>
                  </li>
                  <li>모금이 완료되면 모금자를 저장한다.
                    <ul>
                      <li>주소형 address</li>
                    </ul>
                    <ul>
                      <li>이더리움 주소를 저장할 수 있는 자료형</li>
                      <li>초기값은 0x0
      - msg.sender</li>
                      <li>메시지 송신자를 알 수 있는 전역변수
      - 자료형의 배열</li>
                      <li>uint[4] fixedArray;</li>
                      <li>uint[] dynamicArray;</li>
                      <li>push() : 배열의 가장 뒤에 요소 추가</li>
                    </ul>
                  </li>
                </ol>
              </li>
            </ul>
          </li>
          <li>currentCollection()
            <ul>
              <li>요구사항
                <ol>
                  <li>현재까지 모금된 금액을 누구나 확인할 수 있다.
                    <ul>
                      <li>함수의 반환문 작성</li>
                    </ul>
                    <ul>
                      <li>address(this).balance;</li>
                      <li>return address(this).balance;
      - view</li>
                      <li>상태 변수에 변화를 가하지 않고 읽기만 하는 함수</li>
                    </ul>
                  </li>
                </ol>
              </li>
            </ul>
          </li>
          <li>withdraw()
            <ul>
              <li>요구사항
                <ol>
                  <li>지정된 수령자만 호출할 수 있다.
                    <ul>
                      <li>이더 전송이 일어나는 payable함수</li>
                      <li>유효성 체크: 수령자가 맞는 지 확인</li>
                    </ul>
                  </li>
                  <li>모금 종료 이후에만 호출할 수 있다.
                    <ul>
                      <li>유효성 체크: 모금이 종료되었는 지 확인</li>
                    </ul>
                  </li>
                  <li>수령자에게 컨트랙트가 보유한 이더를 송금한다.
                    <ul>
                      <li>함수 modifier 작성</li>
                      <li>address의 멤버: balance, transfer</li>
                    </ul>
                    <ul>
                      <li>컨트랙트가 보유한 이더
                        <ul>
                          <li>&lt;address&gt;.balance</li>
                        </ul>
                      </li>
                      <li>요청 주소에게 컨트랙트 보유 이더 송금
                        <ul>
                          <li>&lt;address payable&gt;.transfer(uint256 amount)</li>
                        </ul>
                      </li>
                    </ul>
                  </li>
                </ol>
              </li>
            </ul>
          </li>
          <li>selectRandomFunder
            <ul>
              <li>요구사항
                <ol>
                  <li><em>keccak256를 활용하여 난수를 생성한다.</em>
                    <ul>
                      <li>가스가 덜 생기도록 view로 작성</li>
                      <li>해당 함수가 안전한지 확인</li>
                    </ul>
                  </li>
                  <li>모금자 배열 내에서 랜덤으로 모금자 주소와 해당 주소의 기부금 액수를 반환한다.</li>
                  <li>누구든지 요청 가능</li>
                </ol>
              </li>
            </ul>
          </li>
          <li>selectRandomFunder2
            <ul>
              <li>요구사항
                <ol>
                  <li>Chainlink VRF를 <em>활용하여 Chainlink에 난수 값을 요청한다.</em></li>
                  <li>스마트컨트랙의 생성자만 호출할 수 있다.
                    <ul>
                      <li>유효성 체크: 스마트 컨트랙 생성자가 맞는 지 확인</li>
                    </ul>
                  </li>
                  <li>스마트컨트랙이 가진 Link 토큰이 충분해야 호출할 수 있다.
                    <ul>
                      <li>유효성 체크: 가스로 필요한 Link 토큰의 양이 충분한지 확인한다.</li>
                    </ul>
                  </li>
                </ol>
              </li>
            </ul>
          </li>
          <li>fulfillRandomness
            <ul>
              <li>요구사항
                <ol>
                  <li>Chainlink VRF에서 난수값을 수신했을 때 동작한다.</li>
                  <li>모금자 배열 내에서 랜덤으로 모금자 주소와 해당 주소의 기부금 액수를 반환한다.</li>
                  <li>스마트컨트랙 내부에서만 호출 가능</li>
                </ol>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </div>
</details>

<h2 id="solidity-코드-from-gist">Solidity 코드 (from Gist)</h2>

<script src="https://gist.github.com/redniche/d19f6f9a016a5a8d0944b895d32c4d63.js"></script>

<h2 id="리믹스로-위-코드-테스트-해보기"><a href="https://remix.ethereum.org/#version=undefined&amp;optimize=undefined&amp;runs=undefined&amp;gist=d19f6f9a016a5a8d0944b895d32c4d63">리믹스로 위 코드 테스트 해보기</a></h2>

<h3 id="체인링크-vrfselectrandomfunder2실행-결과">체인링크 VRF(selectRandomFunder2)실행 결과</h3>

<p><img src="/assets/img/develop/blockchain/etherium/infomation/4.png" alt="Untitled.png" /></p>

<p><em>스마트 컨트랙의 이벤트로 결과를 확인할 수 있다.</em></p>

<hr />

<p><br /></p>

<p>이번 포스트에선 Solidity로 구체적인 기능을 가진 스마트 컨트랙을 작성해보았습니다.<br />
내용이 조금 어려울 수 있으나 코드와 주석을 잘 보시면 좀 더 심화적인 학습이 가능하리라 생각합니다.</p>

<p>감사합니다.</p>]]></content><author><name></name></author><category term="블록체인" /><category term="정보" /><category term="맛보기" /><category term="니체" /><category term="예찬군" /><category term="개발" /><category term="이더리움" /><category term="블록체인" /><category term="트랜잭션" /><category term="Remix" /><category term="IDE" /><category term="체인링크," /><category term="Chainlink" /><summary type="html"><![CDATA[좀 더 어려운 스마트 컨트랙 직접 만들어보기 (feat. Chainlink)]]></summary></entry><entry><title type="html">블록체인 [이더리움을 통해 맛보기] (3)</title><link href="https://redniche.github.io/posts/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8-%EC%9D%B4%EB%8D%94%EB%A6%AC%EC%9B%80%EC%9D%84-%ED%86%B5%ED%95%B4-%EB%A7%9B%EB%B3%B4%EA%B8%B0-3/" rel="alternate" type="text/html" title="블록체인 [이더리움을 통해 맛보기] (3)" /><published>2022-02-25T01:28:00+09:00</published><updated>2022-02-25T01:28:00+09:00</updated><id>https://redniche.github.io/posts/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8-%EC%9D%B4%EB%8D%94%EB%A6%AC%EC%9B%80%EC%9D%84-%ED%86%B5%ED%95%B4-%EB%A7%9B%EB%B3%B4%EA%B8%B0-3</id><content type="html" xml:base="https://redniche.github.io/posts/%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8-%EC%9D%B4%EB%8D%94%EB%A6%AC%EC%9B%80%EC%9D%84-%ED%86%B5%ED%95%B4-%EB%A7%9B%EB%B3%B4%EA%B8%B0-3/"><![CDATA[<h1 id="솔리디티-solidity">솔리디티 (Solidity)</h1>

<p>지난 포스트에선 Remix IDE에서 솔리디티 예제 파일을 컴파일 하고 배포하는 것을 해 보았습니다.</p>

<p>오늘 할 것은 앞서 한 것들을 바탕으로 실제로 솔리디티를 배우고 소스를 코딩하는 것을 목표로 할 것입니다.</p>

<h2 id="솔리디티의-구조">솔리디티의 구조</h2>

<p><img src="/assets/img/develop/blockchain/etherium/infomation/3.png" alt="Untitled" /></p>

<p>지난 사용했었던 예제 .sol 파일을 라인별로 분석해 솔리디티의 기본 구조를 알아봅시다.</p>

<p>1 라인: 소스코드의 라이선스를 GPL-3.0으로 명시</p>

<p>3 라인: <em>Version Pragma</em>: 소스코드가 이용하는 컴파일러 버전 명시</p>

<ul>
  <li>Sematic versioning을 따르고 있습니다.
major.minor.patch</li>
  <li>^(캐럿 연산자): ‘이상’ ← 이하 이상 할 때 그 이상입니다.</li>
</ul>

<p>9 라인: 컨트랙트의 범위를 나타내는 부분으로 중괄호로(28라인과 함께) 감싸져 있는 것을 보실 수 있습니다.</p>

<p>11라인: 상태 변수(<strong><em>State Variable</em></strong>)이 선언되어 있습니다.</p>

<h3 id="state-variable">State Variable</h3>

<ul>
  <li>블록체인(contract storage)에 값이 저장되는 변수</li>
  <li>상태 변수의 접근 제어자(Visibility)를 external, public, priavte와 같이 지정 가능</li>
  <li>기본형, 고조체, 배열 등 다양한 자료형이 존재</li>
</ul>

<p>17라인: 함수(<strong><em>Function</em></strong>)이 선언되어 있습니다.</p>

<h3 id="function">Function</h3>

<ul>
  <li>컨트랙트 단위의 기능(해당 스마트컨트랙이 할 수 있는 기능)</li>
  <li>매개 변수, 제어자, 반환값 지정 가능</li>
  <li>함수 내부서 상태 변수의 값을 변경하거나 읽을 수 있음 (Read&amp;Write)</li>
</ul>

<h1 id="솔리디티-문법">솔리디티 문법</h1>

<h3 id="기본형-primitives-타입">기본형 Primitives 타입</h3>

<ul>
  <li>논리형
bool: true or false</li>
  <li>정수형
uint: unsigned integer
int: signed integer</li>
  <li>8 ~ 256 bit를 표현할 수 있으며, uint는 uint256과 같습니다</li>
  <li>주소형
address: 이더리움의 주소를 표현</li>
  <li>바이트형
bytes# or byte[]: 데이터를 바이트로 표현할 수 있습니다</li>
</ul>

<h3 id="접근-제어자-visibility">접근 제어자 Visibility</h3>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>private</th>
      <th>internal</th>
      <th>public</th>
      <th>external</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>설명</td>
      <td>- 컨트랙트 내에서만 접근 가능</td>
      <td>- 현재 컨트랙트와 자식 컨트랙트에서 접근 가능</td>
      <td>- 현재 컨트랙트, 자식 컨트랙트, 외부 컨트랙트 및 주소에서 접근 가능</td>
      <td>- 외부 컨트랙트와 주소에서 접근 가능 <br /> (내부 접근 불가)</td>
    </tr>
    <tr>
      <td>State Variables</td>
      <td>O</td>
      <td>X</td>
      <td>O</td>
      <td>O</td>
    </tr>
    <tr>
      <td>Functions</td>
      <td>O</td>
      <td>O</td>
      <td>O</td>
      <td>O</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>public으로 되어 있으면 외부 컨트랙트에서 해당 상태 변수를 바로 조회할 수도 있습니다.</li>
</ul>

<h3 id="solidity-예제">Solidity 예제</h3>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="rouge-code"><pre><span class="c1">// SPDX-License-Identifier: GPL-3.0
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">&gt;=</span><span class="mf">0.7</span><span class="p">.</span><span class="mi">0</span> <span class="o">&lt;</span><span class="mf">0.9</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">ParentTest</span> <span class="p">{</span>
    <span class="c1">// State variables 테스트
</span>    <span class="kt">string</span> <span class="k">private</span> <span class="n">privateVar</span> <span class="o">=</span> <span class="s">"private variable test"</span><span class="p">;</span>
    <span class="kt">string</span> <span class="k">internal</span> <span class="n">internalVar</span> <span class="o">=</span> <span class="s">"internal variable test"</span><span class="p">;</span>
    <span class="kt">string</span> <span class="k">public</span> <span class="n">publicVar</span> <span class="o">=</span> <span class="s">"public variable test"</span><span class="p">;</span>

    <span class="c1">// Private function
</span>    <span class="k">function</span> <span class="n">privateFunc</span><span class="p">()</span> <span class="k">private</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"private test function called"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Private fucntion을 테스트할 fucntion
</span>    <span class="k">function</span> <span class="n">testPrivateFunc</span><span class="p">()</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">privateFunc</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// Internal function
</span>    <span class="k">function</span> <span class="n">internalFunc</span><span class="p">()</span> <span class="k">internal</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"internal test function called in Parent Contract"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Internal fucntion을 테스트할 fucntion
</span>    <span class="k">function</span> <span class="n">testInternalFunc</span><span class="p">()</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">virtual</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">internalFunc</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// Public functions 테스트
</span>    <span class="k">function</span> <span class="n">publicFunc</span><span class="p">()</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"public test function called"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// External functions
</span>    <span class="k">function</span> <span class="n">externalFunc</span><span class="p">()</span> <span class="k">external</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"external test function called"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">contract</span> <span class="n">ChildTest</span> <span class="k">is</span> <span class="n">ParentTest</span> <span class="p">{</span>
    <span class="c1">// Internal function call be called inside child contracts.
</span>    <span class="k">function</span> <span class="n">testInternalFunc</span><span class="p">()</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">override</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">internalFunc</span><span class="p">();</span>
    <span class="p">}</span>

	<span class="k">function</span> <span class="n">testInternalFuncInChild</span><span class="p">()</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">){</span>
        <span class="c1">// return privateFunc(); //에러 발생
</span>        <span class="k">return</span> <span class="n">internalFunc</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>타 언어와 다른 특징으로는 함수의 return타입을 뒤에 선언한다는 점</li>
  <li>internal 함수는 자식에서 호출이 가능</li>
  <li>public 함수는 자식 뿐만 아닌 외부에서도 모두 호출이 가능</li>
  <li>이 예시를 컴파일 해서 배포(배포 방법은 이전 포스트 참고)한 후 각 함수를 호출해보면 private 와 public과 같은 Visibility를 잘 확인하실 수 있습니다.</li>
</ul>

<h2 id="자주-쓰는-자료형타입">자주 쓰는 자료형(타입)</h2>

<h3 id="배열-array">배열 Array</h3>

<ul>
  <li>고정 길이, 가변 길이 배열이 존재합니다</li>
  <li>배열형 자료구조 제어 방법
index에 접근
push, pop, delete 사용</li>
  <li>함수 내에서 로컬 변수로 배열을 사용하기 위해서는 고정 길이로 선언해야 합니다</li>
  <li>
    <p>인덱스는 0부터 시작합니다</p>

    <h3 id="solidity-예제-1">Solidity 예제</h3>

    <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
</pre></td><td class="rouge-code"><pre><span class="c1">// SPDX-License-Identifier: GPL-3.0
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">&gt;=</span><span class="mf">0.7</span><span class="p">.</span><span class="mi">0</span> <span class="o">&lt;</span><span class="mf">0.9</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">Array</span> <span class="p">{</span>
    <span class="c1">// 고정 길이 배열, 모든 원소는 0으로 초기화 됨
</span>    <span class="kt">uint</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="k">public</span> <span class="n">fixedSizeArr</span><span class="p">;</span>

    <span class="c1">// 가변길이 배열
</span>    <span class="kt">uint</span><span class="p">[]</span> <span class="k">public</span> <span class="n">arr</span><span class="p">;</span> <span class="c1">// 초기화 안 한 상태
</span>    <span class="kt">uint</span><span class="p">[]</span> <span class="k">public</span> <span class="n">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span> <span class="c1">// 같은 라인에서 초기화도 같이 한 상태
</span>
    <span class="c1">// 배열의 접근(조회) 방법
</span>    <span class="k">function</span> <span class="n">get</span><span class="p">(</span><span class="kt">uint</span> <span class="n">i</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">arr2</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// 새 원소를 배열에 추가
</span>    <span class="c1">// 이 함수가 호출되고 나면 배열의 크기를 확인해 보자
</span>    <span class="k">function</span> <span class="n">push</span><span class="p">(</span><span class="kt">uint</span> <span class="n">i</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
        <span class="n">arr</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// 배열에서 마지막 원소 삭제
</span>    <span class="c1">// 이 함수가 호출되고 나면 배열의 크기를 확인해 보자
</span>    <span class="k">function</span> <span class="n">pop</span><span class="p">()</span> <span class="k">public</span> <span class="p">{</span>
        <span class="n">arr</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">// delte 지시자를 사용하지만 실상은 특정 인덱스의 원소를 0으로 초기화시키는 동작을 함
</span>    <span class="c1">// 이 함수가 호출되고 나면 배열의 크기를 확인해 보자
</span>    <span class="k">function</span> <span class="n">remove</span><span class="p">(</span><span class="kt">uint</span> <span class="n">index</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
        <span class="k">delete</span> <span class="n">arr</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// 배열의 크기를 반환하는 함수
</span>    <span class="k">function</span> <span class="n">getLength</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">arr</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 전체 배열을 반환하는 함수
</span>    <span class="k">function</span> <span class="n">getArr</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">[]</span> <span class="k">memory</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">arr</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 고정길이의 5칸짜리 배열을 생성하고 그것을 반환해주는 함수
</span>    <span class="k">function</span> <span class="n">createArray</span><span class="p">()</span> <span class="k">external</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">[]</span> <span class="k">memory</span><span class="p">){</span>
        <span class="c1">// create array in memory, only fixed size can be created
</span>        <span class="kt">uint</span><span class="p">[]</span> <span class="k">memory</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">uint</span><span class="p">[](</span><span class="mi">5</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h3 id="매핑-mapping-자주-쓰임">매핑 Mapping (자주 쓰임)</h3>

<p>예시를 통해 Mapping에 대해 다음을 배워봅시다.</p>

<ul>
  <li>매핑형 선언</li>
  <li>접근, 추가, 삭제</li>
  <li>매핑에 저장된 key의 목록을 얻을 수 있는 방법을 제공하지 않습니다</li>
</ul>

<h3 id="solidity-예제-2">Solidity 예제</h3>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="c1">// SPDX-License-Identifier: UNLICENSED
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">&gt;=</span><span class="mf">0.7</span><span class="p">.</span><span class="mi">0</span> <span class="o">&lt;</span><span class="mf">0.9</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">Mapping</span> <span class="p">{</span>
    <span class="c1">// 매핑의 선언
</span>    <span class="c1">// address(주소)를 uint로 매핑
</span>    <span class="k">mapping</span><span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="kt">uint</span><span class="p">)</span> <span class="k">public</span> <span class="n">addrToUint</span><span class="p">;</span>

    <span class="c1">// 매핑 내의 키 값으로 값을 연결함
</span>    <span class="c1">// 만약 해당하는 키가 없으면, 해당 타입의 기본 값을 반환함, 0.
</span>    <span class="k">function</span> <span class="n">get</span><span class="p">(</span><span class="kt">address</span> <span class="n">_addr</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">addrToUint</span><span class="p">[</span><span class="n">_addr</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// 매핑 내 address 키에 해당하는 unit 값을 업데이트
</span>    <span class="k">function</span> <span class="n">set</span><span class="p">(</span><span class="kt">address</span> <span class="n">_addr</span><span class="p">,</span> <span class="kt">uint</span> <span class="n">_i</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
        <span class="n">addrToUint</span><span class="p">[</span><span class="n">_addr</span><span class="p">]</span> <span class="o">=</span> <span class="n">_i</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 매핑 내 address 키에 해당하는 unit 값을 기본 값으로 초기화, 0.
</span>    <span class="k">function</span> <span class="n">reset</span><span class="p">(</span><span class="kt">address</span> <span class="n">_addr</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
        <span class="k">delete</span> <span class="n">addrToUint</span><span class="p">[</span><span class="n">_addr</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// 이런식으로 매핑의 값을 uint 배열 때처럼 불러오는 것은 불가능하다(에러)
</span>    <span class="c1">// 왜냐하면 매핑은 내부적으로 키를 저장해 놓는 것이 아니라 키 자체의 sha3해시에 의해 계산된
</span>    <span class="c1">// 상태 메모리(state memory)에 저장된 값만 저장한다. 따라서 매핑의 조회는 원래 키가 제공되어야만 이를 계산하여
</span>    <span class="c1">// 조회할 수 있게 구현되어 있기에 반드시 key가 있는 상태로 조회되어야 한다.
</span>    <span class="c1">// function getMapping() public view returns (mapping memory){
</span>    <span class="c1">//     return addrToUint;
</span>    <span class="c1">// }
</span><span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="사용자-선언-자료형---struct">사용자 선언 자료형 - Struct</h3>

<p>다음을 예시를 활용해 배워봅시다. Struct는 한글로 구조체라고도 합니다.</p>

<ul>
  <li>여러 자료형을 하나의 관점으로 묶어서 관리하고자 할 때 선언합니다. (마치 C언어 같음)</li>
</ul>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">struct</span> <span class="n">Todo</span><span class="p">{</span>
	<span class="kt">string</span> <span class="n">todoText</span><span class="p">;</span>
	<span class="kt">bool</span> <span class="n">isComplete</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>구조체의 Array, Mapping 의 값으로 지정이 가능합니다.</li>
  <li>구조체 생성, 접근, 변경</li>
  <li>함수 안에서 struct 상태 변수 참조 방법</li>
</ul>

<h3 id="solidity-예제-3">Solidity 예제</h3>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
</pre></td><td class="rouge-code"><pre><span class="c1">// SPDX-License-Identifier: UNLICENSED
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">&gt;=</span><span class="mf">0.7</span><span class="p">.</span><span class="mi">0</span> <span class="o">&lt;</span><span class="mf">0.9</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">Struct</span> <span class="p">{</span>

    <span class="c1">//구조체의 선언
</span>    <span class="k">struct</span> <span class="n">Todo</span> <span class="p">{</span>
        <span class="kt">string</span> <span class="n">text</span><span class="p">;</span>
        <span class="kt">bool</span> <span class="n">boolean</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 구조체의 배열 선언
</span>    <span class="n">Todo</span><span class="p">[]</span> <span class="k">public</span> <span class="n">structTodoArray</span><span class="p">;</span>

    <span class="c1">// 주소를 Todo 타입으로 매핑한다.
</span>    <span class="k">mapping</span><span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="n">Todo</span><span class="p">)</span> <span class="k">public</span> <span class="n">addrToStruct</span><span class="p">;</span>

    <span class="c1">// 새로운 구조체를 생성해서 구조체 배열에 푸시
</span>    <span class="c1">// 접근방식 1
</span>    <span class="k">function</span> <span class="n">create1</span><span class="p">(</span><span class="kt">string</span> <span class="k">memory</span> <span class="n">_text</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
        <span class="n">structTodoArray</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Todo</span><span class="p">(</span><span class="n">_text</span><span class="p">,</span> <span class="nb">false</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="c1">// 접근방식 2
</span>    <span class="k">function</span> <span class="n">create2</span><span class="p">(</span><span class="kt">string</span> <span class="k">memory</span> <span class="n">_text</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
        <span class="n">structTodoArray</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Todo</span><span class="p">({</span><span class="n">text</span><span class="o">:</span> <span class="n">_text</span><span class="p">,</span> <span class="n">boolean</span><span class="o">:</span> <span class="nb">false</span><span class="p">}));</span>
    <span class="p">}</span>

    <span class="c1">// 접근방식 3
</span>    <span class="k">function</span> <span class="n">create3</span><span class="p">(</span><span class="kt">string</span> <span class="k">memory</span> <span class="n">_text</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
        <span class="n">Todo</span> <span class="k">memory</span> <span class="n">s</span><span class="p">;</span>
        <span class="n">s</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">_text</span><span class="p">;</span>
        <span class="n">structTodoArray</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// 구조체 배열 내 특정 인덱스의 Todo 인스턴스의 text를 변경
</span>    <span class="k">function</span> <span class="n">updateText</span><span class="p">(</span><span class="kt">uint</span> <span class="n">_index</span><span class="p">,</span> <span class="kt">string</span> <span class="k">memory</span> <span class="n">_text</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
        <span class="n">Todo</span> <span class="k">storage</span> <span class="n">s</span> <span class="o">=</span> <span class="n">structTodoArray</span><span class="p">[</span><span class="n">_index</span><span class="p">];</span>
        <span class="n">s</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">_text</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 불리언(Boolean) 값을 토글
</span>    <span class="k">function</span> <span class="n">updateBoolean</span><span class="p">(</span><span class="kt">uint</span> <span class="n">_index</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
        <span class="n">Todo</span> <span class="k">storage</span> <span class="n">s</span> <span class="o">=</span> <span class="n">structTodoArray</span><span class="p">[</span><span class="n">_index</span><span class="p">];</span>
        <span class="kt">bool</span> <span class="n">current</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">boolean</span><span class="p">;</span>
        <span class="n">s</span><span class="p">.</span><span class="n">boolean</span> <span class="o">=</span> <span class="o">!</span><span class="n">current</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="함수-function">함수 function</h2>

<p>예제를 통해 다음을 배워봅시다.</p>

<ul>
  <li>함수 선언 방법</li>
  <li>매개변수 유무, 반환 값 유무</li>
  <li>view, pure 함수의 특징</li>
  <li>2개 이상의 값을 반환하도록 선언</li>
</ul>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td><td class="rouge-code"><pre>
<span class="c1">// SPDX-License-Identifier: UNLICENSED
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">&gt;=</span><span class="mf">0.7</span><span class="p">.</span><span class="mi">0</span> <span class="o">&lt;</span><span class="mf">0.9</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">Function</span> <span class="p">{</span>

    <span class="c1">//여러 상태변수들 선언
</span>    <span class="kt">uint</span> <span class="k">public</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="kt">uint</span> <span class="k">public</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">string</span> <span class="k">public</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"hello solidity"</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="k">public</span> <span class="n">b</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>

    <span class="c1">// 파라미터와 리턴값이 없는 함수
</span>    <span class="k">function</span> <span class="n">addOne</span><span class="p">()</span> <span class="k">public</span> <span class="p">{</span>
        <span class="n">num</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 하나의 파라미터와 리턴값이 있는 함수
</span>    <span class="k">function</span> <span class="n">addNumber</span><span class="p">(</span><span class="kt">uint</span> <span class="n">x</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">num</span> <span class="o">+=</span> <span class="n">x</span><span class="p">;</span>

        <span class="k">return</span> <span class="n">num</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// view - 상태변수들을 변경하지 않는다, 단순히 읽음. 가스가 안듬.
</span>    <span class="k">function</span> <span class="n">addAndReturn</span><span class="p">(</span><span class="kt">uint</span> <span class="n">x</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="p">{</span>
       <span class="k">return</span> <span class="n">num</span> <span class="o">+</span> <span class="n">x</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// pure - 상태 변수를 읽거나 수정하지 않음. 가스가 안듬.
</span>    <span class="k">function</span> <span class="n">add</span><span class="p">(</span><span class="kt">uint</span> <span class="n">x</span><span class="p">,</span> <span class="kt">uint</span> <span class="n">y</span><span class="p">)</span> <span class="k">public</span> <span class="k">pure</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="p">{</span>
       <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 여러 값들을 리턴하는 방법.
</span>    <span class="k">function</span> <span class="n">returnMany</span><span class="p">()</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint</span><span class="p">,</span> <span class="kt">string</span> <span class="k">memory</span><span class="p">,</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="data-location">Data location</h2>

<ul>
  <li>배열이나 구조체처럼 복합타입(Complex type)의 경우 데이터의 위치(Data location)에 대한 어노테이션(Annotation)이 추가됩니다.</li>
  <li>
    <p>메모리(memory)와 저장소(storage), 콜데이터(calldata)로 구분되는 데이터의 위치는 각 타입별로 기본값이 있으나 필요에 따라서 재지정이 가능합니다.</p>

    <ul>
      <li>메모리(memory) : 함수 내에서 임시로 데이터(storage 등)를 저장 할 때 사용하는 변수이다. 임시 데이터(temporary data)</li>
      <li>저장소(storage) : 블록체인 상에 영구이 저장된다. 영구데이터(permanent data) 영역에 데이터가 저장되므로 다른 키워드에 비해 큰 비용을 초래한다.</li>
      <li>콜데이터(calldata) : 리턴 파라미터를 제외한 외부 함수의 파라미터들, 데이터를 호출하고 메모리와 비슷하게 동작 → 함수에 전달되는 매개 변수처럼 변경 불가능하고 임시적인 데이터 저장 영역임.</li>
    </ul>

    <h3 id="solidity-예제-4">Solidity 예제</h3>

    <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="rouge-code"><pre><span class="c1">// SPDX-License-Identifier: UNLICENSED
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">&gt;=</span><span class="mf">0.7</span><span class="p">.</span><span class="mi">0</span> <span class="o">&lt;</span><span class="mf">0.9</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">HamburgerFactory</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">Hamburger</span> <span class="p">{</span>
	    <span class="kt">string</span> <span class="n">name</span><span class="p">;</span>
	    <span class="kt">string</span> <span class="n">status</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">Hamburger</span><span class="p">[]</span> <span class="n">Hamburgers</span><span class="p">;</span>

    <span class="c1">//햄버거를 초기화하고 배열에 햄버거를 넣음
</span>    <span class="k">function</span> <span class="n">createHamburger</span><span class="p">(</span><span class="kt">string</span> <span class="k">memory</span> <span class="n">_text</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
        <span class="n">Hamburgers</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Hamburger</span><span class="p">({</span><span class="n">name</span><span class="o">:</span> <span class="n">_text</span><span class="p">,</span> <span class="n">status</span><span class="o">:</span> <span class="s">"not eat"</span><span class="p">}));</span>
    <span class="p">}</span>

	<span class="k">function</span> <span class="n">eatStorageHamburger</span><span class="p">(</span><span class="kt">uint</span> <span class="n">_index</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
        <span class="c1">// storage로 선언된 myHamburger로 햄버거의 인덱스를 참조전달함
</span>	    <span class="n">Hamburger</span> <span class="k">storage</span> <span class="n">myHamburger</span> <span class="o">=</span> <span class="n">Hamburgers</span><span class="p">[</span><span class="n">_index</span><span class="p">];</span>
        <span class="n">myHamburger</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">"eaten"</span><span class="p">;</span> <span class="c1">//따라서 수행되고 나면 값이 바뀜
</span>	<span class="p">}</span>

	<span class="k">function</span> <span class="n">eatMemoryHamburger</span><span class="p">(</span><span class="kt">uint</span> <span class="n">_index</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span><span class="p">{</span>
        <span class="c1">// 메모리 변수의 선언
</span>	    <span class="n">Hamburger</span> <span class="k">memory</span> <span class="n">myHamburger</span> <span class="o">=</span> <span class="n">Hamburgers</span><span class="p">[</span><span class="n">_index</span><span class="p">];</span>
	    <span class="n">myHamburger</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="s">"eaten"</span><span class="p">;</span> <span class="c1">//상태가 변해도 블록체인에는 영향X.
</span>	<span class="p">}</span>

    <span class="k">function</span> <span class="n">getStatusHamburger</span><span class="p">(</span><span class="kt">uint</span> <span class="n">_index</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span><span class="p">(</span><span class="kt">string</span> <span class="k">memory</span><span class="p">){</span>
        <span class="k">return</span> <span class="n">Hamburgers</span><span class="p">[</span><span class="n">_index</span><span class="p">].</span><span class="n">status</span><span class="p">;</span> <span class="c1">//해당 값이 memory 형태에 담겨서 return됨
</span>    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h2 id="제어문">제어문</h2>

<p>제어문은 타 언어와 매우 유사하므로 예시를 위주로 설명하겠습니다.</p>

<h3 id="조건문-if-else">조건문 If-Else</h3>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1">//함수 내에서만 사용 가능함.
</span><span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">){</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">){</span>
	<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 삼항 연산자
</span>	<span class="k">return</span> <span class="n">_x</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">2</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="반복문-for--while">반복문 for / while</h3>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="c1">//함수 내에서만 사용 가능함.
</span><span class="k">for</span> <span class="p">(</span><span class="kt">uint</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">continue</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">break</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">uint</span> <span class="n">i</span><span class="p">;</span>
<span class="c1">//함수 내에서만 사용 가능함.
</span><span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">){</span>
	<span class="n">i</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>반복문 사용시 주의사항: 이더리움은 튜링 완전머신으로 반복문을 제대로 지원하지만 함수를 수행할 때 수행 시간에 따라 가스가 발생하기 때문에 로직을 비효율적으로 하면 많은 돈이 소모될 수 있습니다.</li>
</ul>

<h2 id="화폐-단위">화폐 단위</h2>

<ul>
  <li>화폐 단위에는 ether와 wei, gwei가 있습니다.</li>
  <li>이더리움 내에선 소수점을 허용하지 않기 때문에 이와 같은 방식을 사용합니다.</li>
</ul>

<div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="c1">// SPDX-License-Identifier: UNLICENSED
</span><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">&gt;=</span><span class="mf">0.7</span><span class="p">.</span><span class="mi">0</span> <span class="o">&lt;</span><span class="mf">0.9</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">EtherUnits</span> <span class="p">{</span>
    <span class="kt">uint</span> <span class="k">public</span> <span class="n">oneWei</span> <span class="o">=</span> <span class="mi">1</span> <span class="kc">wei</span><span class="p">;</span>
    <span class="kt">uint</span> <span class="k">public</span> <span class="n">oneGwei</span> <span class="o">=</span> <span class="mi">1</span> <span class="n">gwei</span><span class="p">;</span>
    <span class="kt">uint</span> <span class="k">public</span> <span class="n">oneEther</span> <span class="o">=</span> <span class="mi">1</span> <span class="kc">ether</span><span class="p">;</span>

    <span class="c1">// 1 wei is equal to 1
</span>    <span class="kt">bool</span> <span class="k">public</span> <span class="n">isOneWei</span> <span class="o">=</span> <span class="mi">1</span> <span class="kc">wei</span> <span class="o">==</span> <span class="mi">1</span><span class="p">;</span>

    <span class="c1">// 1 ether is equal to 10^18 wei
</span>    <span class="kt">bool</span> <span class="k">public</span> <span class="n">isOneEther1</span> <span class="o">=</span> <span class="n">oneEther</span> <span class="o">==</span> <span class="mi">1e18</span><span class="p">;</span>

    <span class="c1">// 1 ether is equals to 10^9 gwei.
</span>    <span class="kt">bool</span> <span class="k">public</span> <span class="n">isOneEther2</span> <span class="o">=</span> <span class="n">oneEther</span> <span class="o">==</span> <span class="mi">10</span><span class="o">**</span><span class="mi">9</span> <span class="o">*</span> <span class="n">oneGwei</span><span class="p">;</span>

    <span class="c1">// 1 gwei is equals to 10^9 wei.
</span>    <span class="kt">bool</span> <span class="k">public</span> <span class="n">isOneGwei</span> <span class="o">=</span> <span class="n">oneGwei</span> <span class="o">==</span> <span class="mi">10</span><span class="o">**</span><span class="mi">9</span> <span class="o">*</span> <span class="n">oneWei</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name></name></author><category term="블록체인" /><category term="정보" /><category term="맛보기" /><category term="니체" /><category term="예찬군" /><category term="개발" /><category term="이더리움" /><category term="블록체인" /><category term="트랜잭션" /><category term="Remix" /><category term="IDE" /><summary type="html"><![CDATA[솔리디티 (Solidity)]]></summary></entry></feed>